
ddd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002498  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800262c  0800262c  0001262c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002644  08002644  00012644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08002654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000022c  20000010  08002664  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000023c  08002664  0002023c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017192  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002769  00000000  00000000  000371d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008782  00000000  00000000  0003993b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ab8  00000000  00000000  000420c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e78  00000000  00000000  00042b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000649f  00000000  00000000  000439f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000041e5  00000000  00000000  00049e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004e074  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000021c0  00000000  00000000  0004e0f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002614 	.word	0x08002614

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08002614 	.word	0x08002614

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_InitTick+0x3c>)
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_InitTick+0x40>)
{
 80004ea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ec:	7818      	ldrb	r0, [r3, #0]
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f6:	6810      	ldr	r0, [r2, #0]
 80004f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004fc:	f000 f8b6 	bl	800066c <HAL_SYSTICK_Config>
 8000500:	4604      	mov	r4, r0
 8000502:	b958      	cbnz	r0, 800051c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000504:	2d0f      	cmp	r5, #15
 8000506:	d809      	bhi.n	800051c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000508:	4602      	mov	r2, r0
 800050a:	4629      	mov	r1, r5
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	f000 f85e 	bl	80005d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_InitTick+0x44>)
 8000516:	4620      	mov	r0, r4
 8000518:	601d      	str	r5, [r3, #0]
 800051a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800051c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051e:	bd38      	pop	{r3, r4, r5, pc}
 8000520:	2000000c 	.word	0x2000000c
 8000524:	20000000 	.word	0x20000000
 8000528:	20000004 	.word	0x20000004

0800052c <HAL_Init>:
{
 800052c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_Init+0x30>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000536:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000546:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000548:	2003      	movs	r0, #3
 800054a:	f000 f82f 	bl	80005ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff ffc8 	bl	80004e4 <HAL_InitTick>
  HAL_MspInit();
 8000554:	f001 fd74 	bl	8002040 <HAL_MspInit>
}
 8000558:	2000      	movs	r0, #0
 800055a:	bd08      	pop	{r3, pc}
 800055c:	40023c00 	.word	0x40023c00

08000560 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <HAL_IncTick+0x10>)
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_IncTick+0x14>)
 8000564:	6811      	ldr	r1, [r2, #0]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	440b      	add	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000038 	.word	0x20000038
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000578:	4b01      	ldr	r3, [pc, #4]	; (8000580 <HAL_GetTick+0x8>)
 800057a:	6818      	ldr	r0, [r3, #0]
}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000038 	.word	0x20000038

08000584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000584:	b538      	push	{r3, r4, r5, lr}
 8000586:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000588:	f7ff fff6 	bl	8000578 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800058c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800058e:	bf1c      	itt	ne
 8000590:	4b05      	ldrne	r3, [pc, #20]	; (80005a8 <HAL_Delay+0x24>)
 8000592:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000594:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000596:	bf18      	it	ne
 8000598:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059a:	f7ff ffed 	bl	8000578 <HAL_GetTick>
 800059e:	1b40      	subs	r0, r0, r5
 80005a0:	4284      	cmp	r4, r0
 80005a2:	d8fa      	bhi.n	800059a <HAL_Delay+0x16>
  {
  }
}
 80005a4:	bd38      	pop	{r3, r4, r5, pc}
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b4:	041b      	lsls	r3, r3, #16
 80005b6:	0c1b      	lsrs	r3, r3, #16
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005bc:	0200      	lsls	r0, r0, #8
 80005be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005c8:	60d3      	str	r3, [r2, #12]
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	68dc      	ldr	r4, [r3, #12]
 80005d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	bf28      	it	cs
 80005e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	f04f 0501 	mov.w	r5, #1
 80005ec:	fa05 f303 	lsl.w	r3, r5, r3
 80005f0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f4:	bf8c      	ite	hi
 80005f6:	3c03      	subhi	r4, #3
 80005f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fa:	4019      	ands	r1, r3
 80005fc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005fe:	fa05 f404 	lsl.w	r4, r5, r4
 8000602:	3c01      	subs	r4, #1
 8000604:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000606:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	ea42 0201 	orr.w	r2, r2, r1
 800060c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	bfaf      	iteee	ge
 8000612:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	f000 000f 	andlt.w	r0, r0, #15
 800061a:	4b06      	ldrlt	r3, [pc, #24]	; (8000634 <HAL_NVIC_SetPriority+0x64>)
 800061c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	bfa5      	ittet	ge
 8000620:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000624:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00
 8000634:	e000ed14 	.word	0xe000ed14

08000638 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000638:	0942      	lsrs	r2, r0, #5
 800063a:	2301      	movs	r3, #1
 800063c:	f000 001f 	and.w	r0, r0, #31
 8000640:	fa03 f000 	lsl.w	r0, r3, r0
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <HAL_NVIC_EnableIRQ+0x14>)
 8000646:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100

08000650 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000650:	0943      	lsrs	r3, r0, #5
 8000652:	2201      	movs	r2, #1
 8000654:	f000 001f 	and.w	r0, r0, #31
 8000658:	fa02 f000 	lsl.w	r0, r2, r0
 800065c:	3320      	adds	r3, #32
 800065e:	4a02      	ldr	r2, [pc, #8]	; (8000668 <HAL_NVIC_DisableIRQ+0x18>)
 8000660:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e100 	.word	0xe000e100

0800066c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800066c:	3801      	subs	r0, #1
 800066e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000672:	d20a      	bcs.n	800068a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000678:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	21f0      	movs	r1, #240	; 0xf0
 800067c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000680:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000682:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800068a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e010 	.word	0xe000e010
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800069a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800069c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800069e:	bf0c      	ite	eq
 80006a0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006a4:	f022 0204 	bicne.w	r2, r2, #4
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	4770      	bx	lr
 80006ac:	e000e010 	.word	0xe000e010

080006b0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006b0:	4770      	bx	lr

080006b2 <HAL_SYSTICK_IRQHandler>:
{
 80006b2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006b4:	f7ff fffc 	bl	80006b0 <HAL_SYSTICK_Callback>
 80006b8:	bd08      	pop	{r3, pc}
	...

080006bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006c0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c4:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000864 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006c8:	4a64      	ldr	r2, [pc, #400]	; (800085c <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ca:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80006cc:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006d0:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006d4:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d8:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 80006dc:	42b7      	cmp	r7, r6
 80006de:	f040 80ad 	bne.w	800083c <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006e2:	684c      	ldr	r4, [r1, #4]
 80006e4:	f024 0a10 	bic.w	sl, r4, #16
 80006e8:	f1ba 0f02 	cmp.w	sl, #2
 80006ec:	d116      	bne.n	800071c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 80006ee:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80006f2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006fa:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006fe:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000702:	f04f 0e0f 	mov.w	lr, #15
 8000706:	fa0e fe0b 	lsl.w	lr, lr, fp
 800070a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800070e:	690d      	ldr	r5, [r1, #16]
 8000710:	fa05 f50b 	lsl.w	r5, r5, fp
 8000714:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000718:	f8cc 5020 	str.w	r5, [ip, #32]
 800071c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000720:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000722:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000726:	fa05 f50c 	lsl.w	r5, r5, ip
 800072a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800072c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000730:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000734:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000738:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800073c:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000740:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000744:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000746:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800074a:	d815      	bhi.n	8000778 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 800074c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000750:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000754:	68cd      	ldr	r5, [r1, #12]
 8000756:	fa05 fa0c 	lsl.w	sl, r5, ip
 800075a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800075e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000762:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000766:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800076a:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800076e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000772:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000776:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000778:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800077a:	9d00      	ldr	r5, [sp, #0]
 800077c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800077e:	688f      	ldr	r7, [r1, #8]
 8000780:	fa07 f70c 	lsl.w	r7, r7, ip
 8000784:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000786:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000788:	00e5      	lsls	r5, r4, #3
 800078a:	d557      	bpl.n	800083c <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078c:	f04f 0b00 	mov.w	fp, #0
 8000790:	f8cd b00c 	str.w	fp, [sp, #12]
 8000794:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000798:	4d31      	ldr	r5, [pc, #196]	; (8000860 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800079e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007a2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007a6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007aa:	9703      	str	r7, [sp, #12]
 80007ac:	9f03      	ldr	r7, [sp, #12]
 80007ae:	f023 0703 	bic.w	r7, r3, #3
 80007b2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007b6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ba:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007be:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007c6:	f04f 0e0f 	mov.w	lr, #15
 80007ca:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007ce:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007d0:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007d4:	d039      	beq.n	800084a <HAL_GPIO_Init+0x18e>
 80007d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007da:	42a8      	cmp	r0, r5
 80007dc:	d037      	beq.n	800084e <HAL_GPIO_Init+0x192>
 80007de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e2:	42a8      	cmp	r0, r5
 80007e4:	d035      	beq.n	8000852 <HAL_GPIO_Init+0x196>
 80007e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ea:	42a8      	cmp	r0, r5
 80007ec:	d033      	beq.n	8000856 <HAL_GPIO_Init+0x19a>
 80007ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f2:	42a8      	cmp	r0, r5
 80007f4:	bf14      	ite	ne
 80007f6:	2507      	movne	r5, #7
 80007f8:	2504      	moveq	r5, #4
 80007fa:	fa05 f50c 	lsl.w	r5, r5, ip
 80007fe:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000802:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000804:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000806:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000808:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800080c:	bf0c      	ite	eq
 800080e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000810:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000812:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000814:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000816:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800081a:	bf0c      	ite	eq
 800081c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800081e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000820:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000822:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000824:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000828:	bf0c      	ite	eq
 800082a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800082c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800082e:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000830:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000832:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000834:	bf54      	ite	pl
 8000836:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000838:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800083a:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800083c:	3301      	adds	r3, #1
 800083e:	2b10      	cmp	r3, #16
 8000840:	f47f af47 	bne.w	80006d2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000844:	b005      	add	sp, #20
 8000846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800084a:	465d      	mov	r5, fp
 800084c:	e7d5      	b.n	80007fa <HAL_GPIO_Init+0x13e>
 800084e:	2501      	movs	r5, #1
 8000850:	e7d3      	b.n	80007fa <HAL_GPIO_Init+0x13e>
 8000852:	2502      	movs	r5, #2
 8000854:	e7d1      	b.n	80007fa <HAL_GPIO_Init+0x13e>
 8000856:	2503      	movs	r5, #3
 8000858:	e7cf      	b.n	80007fa <HAL_GPIO_Init+0x13e>
 800085a:	bf00      	nop
 800085c:	40013c00 	.word	0x40013c00
 8000860:	40020000 	.word	0x40020000
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000868:	6903      	ldr	r3, [r0, #16]
 800086a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800086c:	bf14      	ite	ne
 800086e:	2001      	movne	r0, #1
 8000870:	2000      	moveq	r0, #0
 8000872:	4770      	bx	lr

08000874 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000874:	b10a      	cbz	r2, 800087a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000876:	6181      	str	r1, [r0, #24]
 8000878:	4770      	bx	lr
 800087a:	0409      	lsls	r1, r1, #16
 800087c:	e7fb      	b.n	8000876 <HAL_GPIO_WritePin+0x2>

0800087e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800087e:	6943      	ldr	r3, [r0, #20]
 8000880:	4059      	eors	r1, r3
 8000882:	6141      	str	r1, [r0, #20]
 8000884:	4770      	bx	lr

08000886 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000886:	4770      	bx	lr

08000888 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000888:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800088c:	6959      	ldr	r1, [r3, #20]
 800088e:	4201      	tst	r1, r0
 8000890:	d002      	beq.n	8000898 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000892:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000894:	f7ff fff7 	bl	8000886 <HAL_GPIO_EXTI_Callback>
 8000898:	bd08      	pop	{r3, pc}
 800089a:	bf00      	nop
 800089c:	40013c00 	.word	0x40013c00

080008a0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80008a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80008a2:	4604      	mov	r4, r0
 80008a4:	2800      	cmp	r0, #0
 80008a6:	d062      	beq.n	800096e <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80008a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80008ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008b0:	b91b      	cbnz	r3, 80008ba <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80008b2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80008b6:	f001 fc0b 	bl	80020d0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80008ba:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80008bc:	4e2d      	ldr	r6, [pc, #180]	; (8000974 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 80008be:	4d2e      	ldr	r5, [pc, #184]	; (8000978 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80008c0:	2324      	movs	r3, #36	; 0x24
 80008c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80008c6:	6813      	ldr	r3, [r2, #0]
 80008c8:	f023 0301 	bic.w	r3, r3, #1
 80008cc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80008ce:	f000 faa5 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80008d2:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80008d4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80008d6:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80008da:	42b3      	cmp	r3, r6
 80008dc:	bf84      	itt	hi
 80008de:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80008e2:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80008e4:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80008e6:	bf91      	iteee	ls
 80008e8:	1c69      	addls	r1, r5, #1
 80008ea:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80008ee:	fbb1 f1f5 	udivhi	r1, r1, r5
 80008f2:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80008f4:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80008f6:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80008f8:	d821      	bhi.n	800093e <HAL_I2C_Init+0x9e>
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000900:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000904:	2b03      	cmp	r3, #3
 8000906:	bf98      	it	ls
 8000908:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800090a:	6a21      	ldr	r1, [r4, #32]
 800090c:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800090e:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000910:	430b      	orrs	r3, r1
 8000912:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000914:	68e1      	ldr	r1, [r4, #12]
 8000916:	6923      	ldr	r3, [r4, #16]
 8000918:	430b      	orrs	r3, r1
 800091a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800091c:	69a1      	ldr	r1, [r4, #24]
 800091e:	6963      	ldr	r3, [r4, #20]
 8000920:	430b      	orrs	r3, r1
 8000922:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000924:	6813      	ldr	r3, [r2, #0]
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800092c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800092e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000930:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000932:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000936:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000938:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 800093c:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800093e:	68a1      	ldr	r1, [r4, #8]
 8000940:	b949      	cbnz	r1, 8000956 <HAL_I2C_Init+0xb6>
 8000942:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000946:	fbb0 f0f3 	udiv	r0, r0, r3
 800094a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800094e:	b163      	cbz	r3, 800096a <HAL_I2C_Init+0xca>
 8000950:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000954:	e7d9      	b.n	800090a <HAL_I2C_Init+0x6a>
 8000956:	2119      	movs	r1, #25
 8000958:	434b      	muls	r3, r1
 800095a:	fbb0 f0f3 	udiv	r0, r0, r3
 800095e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000962:	b113      	cbz	r3, 800096a <HAL_I2C_Init+0xca>
 8000964:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000968:	e7cf      	b.n	800090a <HAL_I2C_Init+0x6a>
 800096a:	2001      	movs	r0, #1
 800096c:	e7cd      	b.n	800090a <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 800096e:	2001      	movs	r0, #1
}
 8000970:	bd70      	pop	{r4, r5, r6, pc}
 8000972:	bf00      	nop
 8000974:	000186a0 	.word	0x000186a0
 8000978:	000f4240 	.word	0x000f4240

0800097c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800097c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000980:	4604      	mov	r4, r0
 8000982:	b918      	cbnz	r0, 800098c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000984:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000986:	b002      	add	sp, #8
 8000988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800098c:	6803      	ldr	r3, [r0, #0]
 800098e:	07dd      	lsls	r5, r3, #31
 8000990:	d410      	bmi.n	80009b4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000992:	6823      	ldr	r3, [r4, #0]
 8000994:	0798      	lsls	r0, r3, #30
 8000996:	d458      	bmi.n	8000a4a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	071a      	lsls	r2, r3, #28
 800099c:	f100 809a 	bmi.w	8000ad4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009a0:	6823      	ldr	r3, [r4, #0]
 80009a2:	075b      	lsls	r3, r3, #29
 80009a4:	f100 80b8 	bmi.w	8000b18 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009a8:	69a2      	ldr	r2, [r4, #24]
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8119 	bne.w	8000be2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80009b0:	2000      	movs	r0, #0
 80009b2:	e7e8      	b.n	8000986 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009b4:	4ba6      	ldr	r3, [pc, #664]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	f002 020c 	and.w	r2, r2, #12
 80009bc:	2a04      	cmp	r2, #4
 80009be:	d007      	beq.n	80009d0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009c6:	2a08      	cmp	r2, #8
 80009c8:	d10a      	bne.n	80009e0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	0259      	lsls	r1, r3, #9
 80009ce:	d507      	bpl.n	80009e0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009d0:	4b9f      	ldr	r3, [pc, #636]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	039a      	lsls	r2, r3, #14
 80009d6:	d5dc      	bpl.n	8000992 <HAL_RCC_OscConfig+0x16>
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1d9      	bne.n	8000992 <HAL_RCC_OscConfig+0x16>
 80009de:	e7d1      	b.n	8000984 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009e0:	6863      	ldr	r3, [r4, #4]
 80009e2:	4d9b      	ldr	r5, [pc, #620]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
 80009e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e8:	d111      	bne.n	8000a0e <HAL_RCC_OscConfig+0x92>
 80009ea:	682b      	ldr	r3, [r5, #0]
 80009ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009f2:	f7ff fdc1 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f6:	4d96      	ldr	r5, [pc, #600]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009fa:	682b      	ldr	r3, [r5, #0]
 80009fc:	039b      	lsls	r3, r3, #14
 80009fe:	d4c8      	bmi.n	8000992 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a00:	f7ff fdba 	bl	8000578 <HAL_GetTick>
 8000a04:	1b80      	subs	r0, r0, r6
 8000a06:	2864      	cmp	r0, #100	; 0x64
 8000a08:	d9f7      	bls.n	80009fa <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	e7bb      	b.n	8000986 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a12:	d104      	bne.n	8000a1e <HAL_RCC_OscConfig+0xa2>
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a1a:	602b      	str	r3, [r5, #0]
 8000a1c:	e7e5      	b.n	80009ea <HAL_RCC_OscConfig+0x6e>
 8000a1e:	682a      	ldr	r2, [r5, #0]
 8000a20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a24:	602a      	str	r2, [r5, #0]
 8000a26:	682a      	ldr	r2, [r5, #0]
 8000a28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a2c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1df      	bne.n	80009f2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000a32:	f7ff fda1 	bl	8000578 <HAL_GetTick>
 8000a36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	039f      	lsls	r7, r3, #14
 8000a3c:	d5a9      	bpl.n	8000992 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a3e:	f7ff fd9b 	bl	8000578 <HAL_GetTick>
 8000a42:	1b80      	subs	r0, r0, r6
 8000a44:	2864      	cmp	r0, #100	; 0x64
 8000a46:	d9f7      	bls.n	8000a38 <HAL_RCC_OscConfig+0xbc>
 8000a48:	e7df      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a4a:	4b81      	ldr	r3, [pc, #516]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	f012 0f0c 	tst.w	r2, #12
 8000a52:	d007      	beq.n	8000a64 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a5a:	2a08      	cmp	r2, #8
 8000a5c:	d111      	bne.n	8000a82 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	025e      	lsls	r6, r3, #9
 8000a62:	d40e      	bmi.n	8000a82 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a64:	4b7a      	ldr	r3, [pc, #488]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	0795      	lsls	r5, r2, #30
 8000a6a:	d502      	bpl.n	8000a72 <HAL_RCC_OscConfig+0xf6>
 8000a6c:	68e2      	ldr	r2, [r4, #12]
 8000a6e:	2a01      	cmp	r2, #1
 8000a70:	d188      	bne.n	8000984 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	6921      	ldr	r1, [r4, #16]
 8000a76:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a7a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a7e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a80:	e78a      	b.n	8000998 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a82:	68e2      	ldr	r2, [r4, #12]
 8000a84:	4b73      	ldr	r3, [pc, #460]	; (8000c54 <HAL_RCC_OscConfig+0x2d8>)
 8000a86:	b1b2      	cbz	r2, 8000ab6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a8c:	f7ff fd74 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a90:	4d6f      	ldr	r5, [pc, #444]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	0798      	lsls	r0, r3, #30
 8000a98:	d507      	bpl.n	8000aaa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a9a:	682b      	ldr	r3, [r5, #0]
 8000a9c:	6922      	ldr	r2, [r4, #16]
 8000a9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000aa2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000aa6:	602b      	str	r3, [r5, #0]
 8000aa8:	e776      	b.n	8000998 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aaa:	f7ff fd65 	bl	8000578 <HAL_GetTick>
 8000aae:	1b80      	subs	r0, r0, r6
 8000ab0:	2802      	cmp	r0, #2
 8000ab2:	d9ef      	bls.n	8000a94 <HAL_RCC_OscConfig+0x118>
 8000ab4:	e7a9      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000ab6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ab8:	f7ff fd5e 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000abc:	4d64      	ldr	r5, [pc, #400]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000abe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ac0:	682b      	ldr	r3, [r5, #0]
 8000ac2:	0799      	lsls	r1, r3, #30
 8000ac4:	f57f af68 	bpl.w	8000998 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ac8:	f7ff fd56 	bl	8000578 <HAL_GetTick>
 8000acc:	1b80      	subs	r0, r0, r6
 8000ace:	2802      	cmp	r0, #2
 8000ad0:	d9f6      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x144>
 8000ad2:	e79a      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ad4:	6962      	ldr	r2, [r4, #20]
 8000ad6:	4b60      	ldr	r3, [pc, #384]	; (8000c58 <HAL_RCC_OscConfig+0x2dc>)
 8000ad8:	b17a      	cbz	r2, 8000afa <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ade:	f7ff fd4b 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ae2:	4d5b      	ldr	r5, [pc, #364]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ae4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ae6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ae8:	079f      	lsls	r7, r3, #30
 8000aea:	f53f af59 	bmi.w	80009a0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aee:	f7ff fd43 	bl	8000578 <HAL_GetTick>
 8000af2:	1b80      	subs	r0, r0, r6
 8000af4:	2802      	cmp	r0, #2
 8000af6:	d9f6      	bls.n	8000ae6 <HAL_RCC_OscConfig+0x16a>
 8000af8:	e787      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000afa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000afc:	f7ff fd3c 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b00:	4d53      	ldr	r5, [pc, #332]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000b02:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b04:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b06:	0798      	lsls	r0, r3, #30
 8000b08:	f57f af4a 	bpl.w	80009a0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b0c:	f7ff fd34 	bl	8000578 <HAL_GetTick>
 8000b10:	1b80      	subs	r0, r0, r6
 8000b12:	2802      	cmp	r0, #2
 8000b14:	d9f6      	bls.n	8000b04 <HAL_RCC_OscConfig+0x188>
 8000b16:	e778      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b18:	4b4d      	ldr	r3, [pc, #308]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
 8000b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000b20:	d128      	bne.n	8000b74 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	9201      	str	r2, [sp, #4]
 8000b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b36:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b38:	4d48      	ldr	r5, [pc, #288]	; (8000c5c <HAL_RCC_OscConfig+0x2e0>)
 8000b3a:	682b      	ldr	r3, [r5, #0]
 8000b3c:	05d9      	lsls	r1, r3, #23
 8000b3e:	d51b      	bpl.n	8000b78 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b40:	68a3      	ldr	r3, [r4, #8]
 8000b42:	4d43      	ldr	r5, [pc, #268]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d127      	bne.n	8000b98 <HAL_RCC_OscConfig+0x21c>
 8000b48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b50:	f7ff fd12 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b54:	4d3e      	ldr	r5, [pc, #248]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000b56:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b58:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b5e:	079b      	lsls	r3, r3, #30
 8000b60:	d539      	bpl.n	8000bd6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f43f af20 	beq.w	80009a8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b68:	4a39      	ldr	r2, [pc, #228]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
 8000b6a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	e719      	b.n	80009a8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000b74:	2600      	movs	r6, #0
 8000b76:	e7df      	b.n	8000b38 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b78:	682b      	ldr	r3, [r5, #0]
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b80:	f7ff fcfa 	bl	8000578 <HAL_GetTick>
 8000b84:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b86:	682b      	ldr	r3, [r5, #0]
 8000b88:	05da      	lsls	r2, r3, #23
 8000b8a:	d4d9      	bmi.n	8000b40 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b8c:	f7ff fcf4 	bl	8000578 <HAL_GetTick>
 8000b90:	1bc0      	subs	r0, r0, r7
 8000b92:	2802      	cmp	r0, #2
 8000b94:	d9f7      	bls.n	8000b86 <HAL_RCC_OscConfig+0x20a>
 8000b96:	e738      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b98:	2b05      	cmp	r3, #5
 8000b9a:	d104      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x22a>
 8000b9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	672b      	str	r3, [r5, #112]	; 0x70
 8000ba4:	e7d0      	b.n	8000b48 <HAL_RCC_OscConfig+0x1cc>
 8000ba6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	672a      	str	r2, [r5, #112]	; 0x70
 8000bae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000bb0:	f022 0204 	bic.w	r2, r2, #4
 8000bb4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1ca      	bne.n	8000b50 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000bba:	f7ff fcdd 	bl	8000578 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bbe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000bc2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bc4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bc6:	0798      	lsls	r0, r3, #30
 8000bc8:	d5cb      	bpl.n	8000b62 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bca:	f7ff fcd5 	bl	8000578 <HAL_GetTick>
 8000bce:	1bc0      	subs	r0, r0, r7
 8000bd0:	4540      	cmp	r0, r8
 8000bd2:	d9f7      	bls.n	8000bc4 <HAL_RCC_OscConfig+0x248>
 8000bd4:	e719      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bd6:	f7ff fccf 	bl	8000578 <HAL_GetTick>
 8000bda:	1bc0      	subs	r0, r0, r7
 8000bdc:	4540      	cmp	r0, r8
 8000bde:	d9bd      	bls.n	8000b5c <HAL_RCC_OscConfig+0x1e0>
 8000be0:	e713      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000be2:	4d1b      	ldr	r5, [pc, #108]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
 8000be4:	68ab      	ldr	r3, [r5, #8]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	f43f aeca 	beq.w	8000984 <HAL_RCC_OscConfig+0x8>
 8000bf0:	4e1b      	ldr	r6, [pc, #108]	; (8000c60 <HAL_RCC_OscConfig+0x2e4>)
 8000bf2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bf4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000bf6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bf8:	d134      	bne.n	8000c64 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000bfa:	f7ff fcbd 	bl	8000578 <HAL_GetTick>
 8000bfe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	0199      	lsls	r1, r3, #6
 8000c04:	d41e      	bmi.n	8000c44 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c06:	6a22      	ldr	r2, [r4, #32]
 8000c08:	69e3      	ldr	r3, [r4, #28]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c0e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c1a:	4c0d      	ldr	r4, [pc, #52]	; (8000c50 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c1c:	0852      	lsrs	r2, r2, #1
 8000c1e:	3a01      	subs	r2, #1
 8000c20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c24:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c26:	2301      	movs	r3, #1
 8000c28:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c2a:	f7ff fca5 	bl	8000578 <HAL_GetTick>
 8000c2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	019a      	lsls	r2, r3, #6
 8000c34:	f53f aebc 	bmi.w	80009b0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c38:	f7ff fc9e 	bl	8000578 <HAL_GetTick>
 8000c3c:	1b40      	subs	r0, r0, r5
 8000c3e:	2802      	cmp	r0, #2
 8000c40:	d9f6      	bls.n	8000c30 <HAL_RCC_OscConfig+0x2b4>
 8000c42:	e6e2      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c44:	f7ff fc98 	bl	8000578 <HAL_GetTick>
 8000c48:	1bc0      	subs	r0, r0, r7
 8000c4a:	2802      	cmp	r0, #2
 8000c4c:	d9d8      	bls.n	8000c00 <HAL_RCC_OscConfig+0x284>
 8000c4e:	e6dc      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
 8000c50:	40023800 	.word	0x40023800
 8000c54:	42470000 	.word	0x42470000
 8000c58:	42470e80 	.word	0x42470e80
 8000c5c:	40007000 	.word	0x40007000
 8000c60:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000c64:	f7ff fc88 	bl	8000578 <HAL_GetTick>
 8000c68:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c6a:	682b      	ldr	r3, [r5, #0]
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	f57f ae9f 	bpl.w	80009b0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c72:	f7ff fc81 	bl	8000578 <HAL_GetTick>
 8000c76:	1b00      	subs	r0, r0, r4
 8000c78:	2802      	cmp	r0, #2
 8000c7a:	d9f6      	bls.n	8000c6a <HAL_RCC_OscConfig+0x2ee>
 8000c7c:	e6c5      	b.n	8000a0a <HAL_RCC_OscConfig+0x8e>
 8000c7e:	bf00      	nop

08000c80 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c80:	4913      	ldr	r1, [pc, #76]	; (8000cd0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c82:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c84:	688b      	ldr	r3, [r1, #8]
 8000c86:	f003 030c 	and.w	r3, r3, #12
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	d003      	beq.n	8000c96 <HAL_RCC_GetSysClockFreq+0x16>
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d003      	beq.n	8000c9a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c92:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c94:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c96:	4810      	ldr	r0, [pc, #64]	; (8000cd8 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c98:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c9a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c9c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c9e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ca0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ca4:	bf14      	ite	ne
 8000ca6:	480c      	ldrne	r0, [pc, #48]	; (8000cd8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ca8:	480a      	ldreq	r0, [pc, #40]	; (8000cd4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000caa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000cae:	bf18      	it	ne
 8000cb0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cb6:	fba1 0100 	umull	r0, r1, r1, r0
 8000cba:	f7ff fa8b 	bl	80001d4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000cca:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cce:	bd08      	pop	{r3, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	00f42400 	.word	0x00f42400
 8000cd8:	007a1200 	.word	0x007a1200

08000cdc <HAL_RCC_ClockConfig>:
{
 8000cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	b910      	cbnz	r0, 8000cec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cec:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <HAL_RCC_ClockConfig+0x124>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	f002 020f 	and.w	r2, r2, #15
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	d328      	bcc.n	8000d4a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cf8:	6821      	ldr	r1, [r4, #0]
 8000cfa:	078f      	lsls	r7, r1, #30
 8000cfc:	d42d      	bmi.n	8000d5a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cfe:	07c8      	lsls	r0, r1, #31
 8000d00:	d440      	bmi.n	8000d84 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d02:	4b3f      	ldr	r3, [pc, #252]	; (8000e00 <HAL_RCC_ClockConfig+0x124>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	f002 020f 	and.w	r2, r2, #15
 8000d0a:	4295      	cmp	r5, r2
 8000d0c:	d366      	bcc.n	8000ddc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d0e:	6822      	ldr	r2, [r4, #0]
 8000d10:	0751      	lsls	r1, r2, #29
 8000d12:	d46c      	bmi.n	8000dee <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d14:	0713      	lsls	r3, r2, #28
 8000d16:	d507      	bpl.n	8000d28 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d18:	4a3a      	ldr	r2, [pc, #232]	; (8000e04 <HAL_RCC_ClockConfig+0x128>)
 8000d1a:	6921      	ldr	r1, [r4, #16]
 8000d1c:	6893      	ldr	r3, [r2, #8]
 8000d1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d26:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d28:	f7ff ffaa 	bl	8000c80 <HAL_RCC_GetSysClockFreq>
 8000d2c:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <HAL_RCC_ClockConfig+0x128>)
 8000d2e:	4a36      	ldr	r2, [pc, #216]	; (8000e08 <HAL_RCC_ClockConfig+0x12c>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	40d8      	lsrs	r0, r3
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <HAL_RCC_ClockConfig+0x130>)
 8000d3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fbd0 	bl	80004e4 <HAL_InitTick>
  return HAL_OK;
 8000d44:	2000      	movs	r0, #0
 8000d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d1c6      	bne.n	8000ce6 <HAL_RCC_ClockConfig+0xa>
 8000d58:	e7ce      	b.n	8000cf8 <HAL_RCC_ClockConfig+0x1c>
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d5c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d60:	bf1e      	ittt	ne
 8000d62:	689a      	ldrne	r2, [r3, #8]
 8000d64:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d68:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d6a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d6c:	bf42      	ittt	mi
 8000d6e:	689a      	ldrmi	r2, [r3, #8]
 8000d70:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d74:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	68a0      	ldr	r0, [r4, #8]
 8000d7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d7e:	4302      	orrs	r2, r0
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	e7bc      	b.n	8000cfe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d84:	6862      	ldr	r2, [r4, #4]
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <HAL_RCC_ClockConfig+0x128>)
 8000d88:	2a01      	cmp	r2, #1
 8000d8a:	d11d      	bne.n	8000dc8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d92:	d0a8      	beq.n	8000ce6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d94:	4e1b      	ldr	r6, [pc, #108]	; (8000e04 <HAL_RCC_ClockConfig+0x128>)
 8000d96:	68b3      	ldr	r3, [r6, #8]
 8000d98:	f023 0303 	bic.w	r3, r3, #3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000da0:	f7ff fbea 	bl	8000578 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000da8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000daa:	68b3      	ldr	r3, [r6, #8]
 8000dac:	6862      	ldr	r2, [r4, #4]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000db6:	d0a4      	beq.n	8000d02 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db8:	f7ff fbde 	bl	8000578 <HAL_GetTick>
 8000dbc:	1bc0      	subs	r0, r0, r7
 8000dbe:	4540      	cmp	r0, r8
 8000dc0:	d9f3      	bls.n	8000daa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000dc2:	2003      	movs	r0, #3
}
 8000dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dc8:	1e91      	subs	r1, r2, #2
 8000dca:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dcc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dce:	d802      	bhi.n	8000dd6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dd4:	e7dd      	b.n	8000d92 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd6:	f013 0f02 	tst.w	r3, #2
 8000dda:	e7da      	b.n	8000d92 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ddc:	b2ea      	uxtb	r2, r5
 8000dde:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	429d      	cmp	r5, r3
 8000de8:	f47f af7d 	bne.w	8000ce6 <HAL_RCC_ClockConfig+0xa>
 8000dec:	e78f      	b.n	8000d0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dee:	4905      	ldr	r1, [pc, #20]	; (8000e04 <HAL_RCC_ClockConfig+0x128>)
 8000df0:	68e0      	ldr	r0, [r4, #12]
 8000df2:	688b      	ldr	r3, [r1, #8]
 8000df4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000df8:	4303      	orrs	r3, r0
 8000dfa:	608b      	str	r3, [r1, #8]
 8000dfc:	e78a      	b.n	8000d14 <HAL_RCC_ClockConfig+0x38>
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00
 8000e04:	40023800 	.word	0x40023800
 8000e08:	0800262c 	.word	0x0800262c
 8000e0c:	2000000c 	.word	0x2000000c

08000e10 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000e10:	4b01      	ldr	r3, [pc, #4]	; (8000e18 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000000c 	.word	0x2000000c

08000e1c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e2a:	6810      	ldr	r0, [r2, #0]
}
 8000e2c:	40d8      	lsrs	r0, r3
 8000e2e:	4770      	bx	lr
 8000e30:	40023800 	.word	0x40023800
 8000e34:	0800263c 	.word	0x0800263c
 8000e38:	2000000c 	.word	0x2000000c

08000e3c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e46:	5cd3      	ldrb	r3, [r2, r3]
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e4a:	6810      	ldr	r0, [r2, #0]
}
 8000e4c:	40d8      	lsrs	r0, r3
 8000e4e:	4770      	bx	lr
 8000e50:	40023800 	.word	0x40023800
 8000e54:	0800263c 	.word	0x0800263c
 8000e58:	2000000c 	.word	0x2000000c

08000e5c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e5c:	6a03      	ldr	r3, [r0, #32]
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e64:	6a03      	ldr	r3, [r0, #32]
{
 8000e66:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e68:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000e6a:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e6c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e6e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e72:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000e74:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000e76:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000e7a:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e7c:	4d0a      	ldr	r5, [pc, #40]	; (8000ea8 <TIM_OC1_SetConfig+0x4c>)
 8000e7e:	42a8      	cmp	r0, r5
 8000e80:	d10b      	bne.n	8000e9a <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000e82:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e84:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000e86:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000e8a:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e8c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000e8e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e92:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e94:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e98:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e9a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000e9c:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000e9e:	684a      	ldr	r2, [r1, #4]
 8000ea0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000ea2:	6203      	str	r3, [r0, #32]
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40010000 	.word	0x40010000

08000eac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000eac:	6a03      	ldr	r3, [r0, #32]
 8000eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eb2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000eb4:	6a03      	ldr	r3, [r0, #32]
{
 8000eb6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000eb8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000eba:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ebc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000ebe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000ec2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000ec4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000ec6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000eca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000ece:	4d0b      	ldr	r5, [pc, #44]	; (8000efc <TIM_OC3_SetConfig+0x50>)
 8000ed0:	42a8      	cmp	r0, r5
 8000ed2:	d10d      	bne.n	8000ef0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ed4:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ed6:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000edc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000ee0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000ee2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ee6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000ee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000eec:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ef0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000ef2:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000ef4:	684a      	ldr	r2, [r1, #4]
 8000ef6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ef8:	6203      	str	r3, [r0, #32]
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
 8000efc:	40010000 	.word	0x40010000

08000f00 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000f00:	6a03      	ldr	r3, [r0, #32]
 8000f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f06:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f08:	6a03      	ldr	r3, [r0, #32]
{
 8000f0a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000f0c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000f0e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000f10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000f12:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000f16:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000f1a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000f1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000f20:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000f24:	4d06      	ldr	r5, [pc, #24]	; (8000f40 <TIM_OC4_SetConfig+0x40>)
 8000f26:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000f28:	bf02      	ittt	eq
 8000f2a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000f2c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000f30:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f34:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000f36:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000f38:	684a      	ldr	r2, [r1, #4]
 8000f3a:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f3c:	6203      	str	r3, [r0, #32]
 8000f3e:	bd30      	pop	{r4, r5, pc}
 8000f40:	40010000 	.word	0x40010000

08000f44 <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 8000f44:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 8000f4c:	6813      	ldr	r3, [r2, #0]
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	4770      	bx	lr

08000f5e <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_DISABLE(htim);
 8000f64:	6803      	ldr	r3, [r0, #0]
 8000f66:	6a19      	ldr	r1, [r3, #32]
 8000f68:	f241 1211 	movw	r2, #4369	; 0x1111
 8000f6c:	4211      	tst	r1, r2
 8000f6e:	d108      	bne.n	8000f82 <HAL_TIM_Base_Stop+0x24>
 8000f70:	6a19      	ldr	r1, [r3, #32]
 8000f72:	f240 4244 	movw	r2, #1092	; 0x444
 8000f76:	4211      	tst	r1, r2
 8000f78:	bf02      	ittt	eq
 8000f7a:	681a      	ldreq	r2, [r3, #0]
 8000f7c:	f022 0201 	biceq.w	r2, r2, #1
 8000f80:	601a      	streq	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8000f88:	2000      	movs	r0, #0
 8000f8a:	4770      	bx	lr

08000f8c <HAL_TIM_PWM_MspInit>:
 8000f8c:	4770      	bx	lr

08000f8e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000f8e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000f92:	2b01      	cmp	r3, #1
{
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000f9a:	d01c      	beq.n	8000fd6 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f9c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8000fa0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000fa8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000faa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000fae:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000fb2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000fb4:	680a      	ldr	r2, [r1, #0]
 8000fb6:	2a40      	cmp	r2, #64	; 0x40
 8000fb8:	d079      	beq.n	80010ae <HAL_TIM_ConfigClockSource+0x120>
 8000fba:	d819      	bhi.n	8000ff0 <HAL_TIM_ConfigClockSource+0x62>
 8000fbc:	2a10      	cmp	r2, #16
 8000fbe:	f000 8093 	beq.w	80010e8 <HAL_TIM_ConfigClockSource+0x15a>
 8000fc2:	d80a      	bhi.n	8000fda <HAL_TIM_ConfigClockSource+0x4c>
 8000fc4:	2a00      	cmp	r2, #0
 8000fc6:	f000 8089 	beq.w	80010dc <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000fd6:	4618      	mov	r0, r3
}
 8000fd8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000fda:	2a20      	cmp	r2, #32
 8000fdc:	f000 808a 	beq.w	80010f4 <HAL_TIM_ConfigClockSource+0x166>
 8000fe0:	2a30      	cmp	r2, #48	; 0x30
 8000fe2:	d1f2      	bne.n	8000fca <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000fe4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fe6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000fea:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000fee:	e036      	b.n	800105e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000ff0:	2a70      	cmp	r2, #112	; 0x70
 8000ff2:	d036      	beq.n	8001062 <HAL_TIM_ConfigClockSource+0xd4>
 8000ff4:	d81b      	bhi.n	800102e <HAL_TIM_ConfigClockSource+0xa0>
 8000ff6:	2a50      	cmp	r2, #80	; 0x50
 8000ff8:	d042      	beq.n	8001080 <HAL_TIM_ConfigClockSource+0xf2>
 8000ffa:	2a60      	cmp	r2, #96	; 0x60
 8000ffc:	d1e5      	bne.n	8000fca <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ffe:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001000:	684d      	ldr	r5, [r1, #4]
 8001002:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001004:	f024 0410 	bic.w	r4, r4, #16
 8001008:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800100a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800100c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800100e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001012:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001016:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800101a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800101e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001020:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001022:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001024:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001028:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800102c:	e017      	b.n	800105e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800102e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001032:	d011      	beq.n	8001058 <HAL_TIM_ConfigClockSource+0xca>
 8001034:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001038:	d1c7      	bne.n	8000fca <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800103a:	688a      	ldr	r2, [r1, #8]
 800103c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800103e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001040:	68c9      	ldr	r1, [r1, #12]
 8001042:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001044:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001048:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800104c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800104e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001056:	e002      	b.n	800105e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	e7b3      	b.n	8000fca <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001062:	688a      	ldr	r2, [r1, #8]
 8001064:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001066:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001068:	68c9      	ldr	r1, [r1, #12]
 800106a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800106c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001070:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001074:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001076:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001078:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800107a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800107e:	e7ee      	b.n	800105e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001080:	684c      	ldr	r4, [r1, #4]
 8001082:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001084:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001086:	6a1d      	ldr	r5, [r3, #32]
 8001088:	f025 0501 	bic.w	r5, r5, #1
 800108c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800108e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001090:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001094:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001098:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800109c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800109e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80010a0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80010a2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80010a8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80010ac:	e7d7      	b.n	800105e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80010ae:	684c      	ldr	r4, [r1, #4]
 80010b0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80010b2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010b4:	6a1d      	ldr	r5, [r3, #32]
 80010b6:	f025 0501 	bic.w	r5, r5, #1
 80010ba:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80010bc:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80010be:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80010c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80010c6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80010ca:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80010cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80010ce:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80010d0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80010d6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80010da:	e7c0      	b.n	800105e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80010dc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80010e2:	f042 0207 	orr.w	r2, r2, #7
 80010e6:	e7ba      	b.n	800105e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80010e8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80010ee:	f042 0217 	orr.w	r2, r2, #23
 80010f2:	e7b4      	b.n	800105e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80010f4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80010fa:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80010fe:	e7ae      	b.n	800105e <HAL_TIM_ConfigClockSource+0xd0>

08001100 <HAL_TIM_PeriodElapsedCallback>:
 8001100:	4770      	bx	lr

08001102 <HAL_TIM_OC_DelayElapsedCallback>:
 8001102:	4770      	bx	lr

08001104 <HAL_TIM_IC_CaptureCallback>:
 8001104:	4770      	bx	lr

08001106 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001106:	4770      	bx	lr

08001108 <HAL_TIM_TriggerCallback>:
 8001108:	4770      	bx	lr

0800110a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800110a:	6803      	ldr	r3, [r0, #0]
 800110c:	691a      	ldr	r2, [r3, #16]
 800110e:	0791      	lsls	r1, r2, #30
{
 8001110:	b510      	push	{r4, lr}
 8001112:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001114:	d50e      	bpl.n	8001134 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	0792      	lsls	r2, r2, #30
 800111a:	d50b      	bpl.n	8001134 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800111c:	f06f 0202 	mvn.w	r2, #2
 8001120:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001122:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001124:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001126:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001128:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800112a:	d077      	beq.n	800121c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800112c:	f7ff ffea 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001130:	2300      	movs	r3, #0
 8001132:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	0750      	lsls	r0, r2, #29
 800113a:	d510      	bpl.n	800115e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	0751      	lsls	r1, r2, #29
 8001140:	d50d      	bpl.n	800115e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001142:	f06f 0204 	mvn.w	r2, #4
 8001146:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001148:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800114a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800114c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001150:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001152:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001154:	d068      	beq.n	8001228 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001156:	f7ff ffd5 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800115a:	2300      	movs	r3, #0
 800115c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	691a      	ldr	r2, [r3, #16]
 8001162:	0712      	lsls	r2, r2, #28
 8001164:	d50f      	bpl.n	8001186 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	0710      	lsls	r0, r2, #28
 800116a:	d50c      	bpl.n	8001186 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800116c:	f06f 0208 	mvn.w	r2, #8
 8001170:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001172:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001174:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001176:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001178:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800117a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800117c:	d05a      	beq.n	8001234 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800117e:	f7ff ffc1 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001182:	2300      	movs	r3, #0
 8001184:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	06d2      	lsls	r2, r2, #27
 800118c:	d510      	bpl.n	80011b0 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	06d0      	lsls	r0, r2, #27
 8001192:	d50d      	bpl.n	80011b0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001194:	f06f 0210 	mvn.w	r2, #16
 8001198:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800119a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800119c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800119e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011a2:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80011a4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011a6:	d04b      	beq.n	8001240 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80011a8:	f7ff ffac 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011ac:	2300      	movs	r3, #0
 80011ae:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	07d1      	lsls	r1, r2, #31
 80011b6:	d508      	bpl.n	80011ca <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	07d2      	lsls	r2, r2, #31
 80011bc:	d505      	bpl.n	80011ca <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011be:	f06f 0201 	mvn.w	r2, #1
 80011c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80011c4:	4620      	mov	r0, r4
 80011c6:	f7ff ff9b 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	0610      	lsls	r0, r2, #24
 80011d0:	d508      	bpl.n	80011e4 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	0611      	lsls	r1, r2, #24
 80011d6:	d505      	bpl.n	80011e4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80011de:	4620      	mov	r0, r4
 80011e0:	f000 f989 	bl	80014f6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	0652      	lsls	r2, r2, #25
 80011ea:	d508      	bpl.n	80011fe <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	0650      	lsls	r0, r2, #25
 80011f0:	d505      	bpl.n	80011fe <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80011f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80011f8:	4620      	mov	r0, r4
 80011fa:	f7ff ff85 	bl	8001108 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	0691      	lsls	r1, r2, #26
 8001204:	d522      	bpl.n	800124c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	0692      	lsls	r2, r2, #26
 800120a:	d51f      	bpl.n	800124c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800120c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001210:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001212:	611a      	str	r2, [r3, #16]
}
 8001214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001218:	f000 b96c 	b.w	80014f4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800121c:	f7ff ff71 	bl	8001102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff ff70 	bl	8001106 <HAL_TIM_PWM_PulseFinishedCallback>
 8001226:	e783      	b.n	8001130 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001228:	f7ff ff6b 	bl	8001102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800122c:	4620      	mov	r0, r4
 800122e:	f7ff ff6a 	bl	8001106 <HAL_TIM_PWM_PulseFinishedCallback>
 8001232:	e792      	b.n	800115a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001234:	f7ff ff65 	bl	8001102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff ff64 	bl	8001106 <HAL_TIM_PWM_PulseFinishedCallback>
 800123e:	e7a0      	b.n	8001182 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001240:	f7ff ff5f 	bl	8001102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff ff5e 	bl	8001106 <HAL_TIM_PWM_PulseFinishedCallback>
 800124a:	e7af      	b.n	80011ac <HAL_TIM_IRQHandler+0xa2>
 800124c:	bd10      	pop	{r4, pc}
	...

08001250 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001250:	4a22      	ldr	r2, [pc, #136]	; (80012dc <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8001252:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001254:	4290      	cmp	r0, r2
 8001256:	d00e      	beq.n	8001276 <TIM_Base_SetConfig+0x26>
 8001258:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800125c:	d00b      	beq.n	8001276 <TIM_Base_SetConfig+0x26>
 800125e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001262:	4290      	cmp	r0, r2
 8001264:	d007      	beq.n	8001276 <TIM_Base_SetConfig+0x26>
 8001266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800126a:	4290      	cmp	r0, r2
 800126c:	d003      	beq.n	8001276 <TIM_Base_SetConfig+0x26>
 800126e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001272:	4290      	cmp	r0, r2
 8001274:	d119      	bne.n	80012aa <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8001276:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800127c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <TIM_Base_SetConfig+0x8c>)
 8001280:	4290      	cmp	r0, r2
 8001282:	d104      	bne.n	800128e <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001284:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800128a:	4313      	orrs	r3, r2
 800128c:	e018      	b.n	80012c0 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800128e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001292:	d0f7      	beq.n	8001284 <TIM_Base_SetConfig+0x34>
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <TIM_Base_SetConfig+0x90>)
 8001296:	4290      	cmp	r0, r2
 8001298:	d0f4      	beq.n	8001284 <TIM_Base_SetConfig+0x34>
 800129a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800129e:	4290      	cmp	r0, r2
 80012a0:	d0f0      	beq.n	8001284 <TIM_Base_SetConfig+0x34>
 80012a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012a6:	4290      	cmp	r0, r2
 80012a8:	d0ec      	beq.n	8001284 <TIM_Base_SetConfig+0x34>
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <TIM_Base_SetConfig+0x94>)
 80012ac:	4290      	cmp	r0, r2
 80012ae:	d0e9      	beq.n	8001284 <TIM_Base_SetConfig+0x34>
 80012b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012b4:	4290      	cmp	r0, r2
 80012b6:	d0e5      	beq.n	8001284 <TIM_Base_SetConfig+0x34>
 80012b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012bc:	4290      	cmp	r0, r2
 80012be:	d0e1      	beq.n	8001284 <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 80012c0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012c2:	688b      	ldr	r3, [r1, #8]
 80012c4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80012c6:	680b      	ldr	r3, [r1, #0]
 80012c8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <TIM_Base_SetConfig+0x8c>)
 80012cc:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80012ce:	bf04      	itt	eq
 80012d0:	690b      	ldreq	r3, [r1, #16]
 80012d2:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80012d4:	2301      	movs	r3, #1
 80012d6:	6143      	str	r3, [r0, #20]
}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40010000 	.word	0x40010000
 80012e0:	40000400 	.word	0x40000400
 80012e4:	40014000 	.word	0x40014000

080012e8 <HAL_TIM_Base_Init>:
{ 
 80012e8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80012ea:	4604      	mov	r4, r0
 80012ec:	b1a0      	cbz	r0, 8001318 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80012ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012f6:	b91b      	cbnz	r3, 8001300 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80012f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80012fc:	f000 ff12 	bl	8002124 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001300:	2302      	movs	r3, #2
 8001302:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001306:	6820      	ldr	r0, [r4, #0]
 8001308:	1d21      	adds	r1, r4, #4
 800130a:	f7ff ffa1 	bl	8001250 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800130e:	2301      	movs	r3, #1
 8001310:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001314:	2000      	movs	r0, #0
 8001316:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001318:	2001      	movs	r0, #1
}
 800131a:	bd10      	pop	{r4, pc}

0800131c <HAL_TIM_PWM_Init>:
{
 800131c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800131e:	4604      	mov	r4, r0
 8001320:	b1a0      	cbz	r0, 800134c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001322:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001326:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800132a:	b91b      	cbnz	r3, 8001334 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800132c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001330:	f7ff fe2c 	bl	8000f8c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001334:	2302      	movs	r3, #2
 8001336:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800133a:	6820      	ldr	r0, [r4, #0]
 800133c:	1d21      	adds	r1, r4, #4
 800133e:	f7ff ff87 	bl	8001250 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001342:	2301      	movs	r3, #1
 8001344:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001348:	2000      	movs	r0, #0
 800134a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800134c:	2001      	movs	r0, #1
}  
 800134e:	bd10      	pop	{r4, pc}

08001350 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001350:	6a03      	ldr	r3, [r0, #32]
 8001352:	f023 0310 	bic.w	r3, r3, #16
 8001356:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001358:	6a03      	ldr	r3, [r0, #32]
{
 800135a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 800135c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800135e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001360:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001362:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001366:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800136a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800136c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001370:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001374:	4d0b      	ldr	r5, [pc, #44]	; (80013a4 <TIM_OC2_SetConfig+0x54>)
 8001376:	42a8      	cmp	r0, r5
 8001378:	d10d      	bne.n	8001396 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800137a:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800137c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800137e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001382:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001386:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001388:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800138c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800138e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001392:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001396:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001398:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800139a:	684a      	ldr	r2, [r1, #4]
 800139c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800139e:	6203      	str	r3, [r0, #32]
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
 80013a2:	bf00      	nop
 80013a4:	40010000 	.word	0x40010000

080013a8 <HAL_TIM_PWM_ConfigChannel>:
{
 80013a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80013aa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80013ae:	2b01      	cmp	r3, #1
{
 80013b0:	4604      	mov	r4, r0
 80013b2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80013b6:	d025      	beq.n	8001404 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80013b8:	2301      	movs	r3, #1
 80013ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80013be:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 80013c2:	2a0c      	cmp	r2, #12
 80013c4:	d818      	bhi.n	80013f8 <HAL_TIM_PWM_ConfigChannel+0x50>
 80013c6:	e8df f002 	tbb	[pc, r2]
 80013ca:	1707      	.short	0x1707
 80013cc:	171e1717 	.word	0x171e1717
 80013d0:	172f1717 	.word	0x172f1717
 80013d4:	1717      	.short	0x1717
 80013d6:	40          	.byte	0x40
 80013d7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013d8:	6820      	ldr	r0, [r4, #0]
 80013da:	f7ff fd3f 	bl	8000e5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013e2:	699a      	ldr	r2, [r3, #24]
 80013e4:	f042 0208 	orr.w	r2, r2, #8
 80013e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013ea:	699a      	ldr	r2, [r3, #24]
 80013ec:	f022 0204 	bic.w	r2, r2, #4
 80013f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013f6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80013f8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80013fa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001400:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001404:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001406:	6820      	ldr	r0, [r4, #0]
 8001408:	f7ff ffa2 	bl	8001350 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800140c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800140e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001418:	699a      	ldr	r2, [r3, #24]
 800141a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800141e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001426:	e7e6      	b.n	80013f6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001428:	6820      	ldr	r0, [r4, #0]
 800142a:	f7ff fd3f 	bl	8000eac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800142e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001430:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001432:	69da      	ldr	r2, [r3, #28]
 8001434:	f042 0208 	orr.w	r2, r2, #8
 8001438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	f022 0204 	bic.w	r2, r2, #4
 8001440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001442:	69da      	ldr	r2, [r3, #28]
 8001444:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001446:	61da      	str	r2, [r3, #28]
    break;
 8001448:	e7d6      	b.n	80013f8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800144a:	6820      	ldr	r0, [r4, #0]
 800144c:	f7ff fd58 	bl	8000f00 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001450:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001452:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001454:	69da      	ldr	r2, [r3, #28]
 8001456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800145a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800145c:	69da      	ldr	r2, [r3, #28]
 800145e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001462:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001464:	69da      	ldr	r2, [r3, #28]
 8001466:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800146a:	e7ec      	b.n	8001446 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800146c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800146c:	6a03      	ldr	r3, [r0, #32]
{
 800146e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001470:	2401      	movs	r4, #1
 8001472:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001474:	ea23 0304 	bic.w	r3, r3, r4
 8001478:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800147a:	6a03      	ldr	r3, [r0, #32]
 800147c:	408a      	lsls	r2, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	6202      	str	r2, [r0, #32]
 8001482:	bd10      	pop	{r4, pc}

08001484 <HAL_TIM_PWM_Start>:
{
 8001484:	b510      	push	{r4, lr}
 8001486:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001488:	2201      	movs	r2, #1
 800148a:	6800      	ldr	r0, [r0, #0]
 800148c:	f7ff ffee 	bl	800146c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_TIM_PWM_Start+0x28>)
 8001494:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001496:	bf02      	ittt	eq
 8001498:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800149a:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800149e:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
} 
 80014a8:	2000      	movs	r0, #0
 80014aa:	bd10      	pop	{r4, pc}
 80014ac:	40010000 	.word	0x40010000

080014b0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80014b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014b4:	2b01      	cmp	r3, #1
{
 80014b6:	b510      	push	{r4, lr}
 80014b8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80014bc:	d018      	beq.n	80014f0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80014be:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80014c2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80014c4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80014c6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80014c8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80014ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014ce:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4322      	orrs	r2, r4
 80014d4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014dc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80014ea:	2300      	movs	r3, #0
 80014ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80014f0:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80014f2:	bd10      	pop	{r4, pc}

080014f4 <HAL_TIMEx_CommutationCallback>:
 80014f4:	4770      	bx	lr

080014f6 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80014f6:	4770      	bx	lr

080014f8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80014fc:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80014fe:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001500:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001502:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001508:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800150a:	6133      	str	r3, [r6, #16]
{
 800150c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800150e:	6883      	ldr	r3, [r0, #8]
 8001510:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001512:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001514:	4303      	orrs	r3, r0
 8001516:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001518:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800151c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800151e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001522:	430b      	orrs	r3, r1
 8001524:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001526:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001528:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800152a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800152c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001530:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001532:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001536:	6173      	str	r3, [r6, #20]
 8001538:	4b7a      	ldr	r3, [pc, #488]	; (8001724 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800153a:	d17c      	bne.n	8001636 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800153c:	429e      	cmp	r6, r3
 800153e:	d003      	beq.n	8001548 <UART_SetConfig+0x50>
 8001540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001544:	429e      	cmp	r6, r3
 8001546:	d144      	bne.n	80015d2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001548:	f7ff fc78 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
 800154c:	2519      	movs	r5, #25
 800154e:	fb05 f300 	mul.w	r3, r5, r0
 8001552:	6860      	ldr	r0, [r4, #4]
 8001554:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001558:	0040      	lsls	r0, r0, #1
 800155a:	fbb3 f3f0 	udiv	r3, r3, r0
 800155e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001562:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001566:	f7ff fc69 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
 800156a:	6863      	ldr	r3, [r4, #4]
 800156c:	4368      	muls	r0, r5
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fbb0 f7f3 	udiv	r7, r0, r3
 8001574:	f7ff fc62 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
 8001578:	6863      	ldr	r3, [r4, #4]
 800157a:	4368      	muls	r0, r5
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001582:	fbb3 f3f9 	udiv	r3, r3, r9
 8001586:	fb09 7313 	mls	r3, r9, r3, r7
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	3332      	adds	r3, #50	; 0x32
 800158e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001598:	f7ff fc50 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
 800159c:	6862      	ldr	r2, [r4, #4]
 800159e:	4368      	muls	r0, r5
 80015a0:	0052      	lsls	r2, r2, #1
 80015a2:	fbb0 faf2 	udiv	sl, r0, r2
 80015a6:	f7ff fc49 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015aa:	6863      	ldr	r3, [r4, #4]
 80015ac:	4368      	muls	r0, r5
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80015b8:	fb09 a313 	mls	r3, r9, r3, sl
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	3332      	adds	r3, #50	; 0x32
 80015c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015ca:	443b      	add	r3, r7
 80015cc:	60b3      	str	r3, [r6, #8]
 80015ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015d2:	f7ff fc23 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
 80015d6:	2519      	movs	r5, #25
 80015d8:	fb05 f300 	mul.w	r3, r5, r0
 80015dc:	6860      	ldr	r0, [r4, #4]
 80015de:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015e2:	0040      	lsls	r0, r0, #1
 80015e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80015e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80015ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80015f0:	f7ff fc14 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
 80015f4:	6863      	ldr	r3, [r4, #4]
 80015f6:	4368      	muls	r0, r5
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fbb0 f7f3 	udiv	r7, r0, r3
 80015fe:	f7ff fc0d 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
 8001602:	6863      	ldr	r3, [r4, #4]
 8001604:	4368      	muls	r0, r5
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fbb0 f3f3 	udiv	r3, r0, r3
 800160c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001610:	fb09 7313 	mls	r3, r9, r3, r7
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	3332      	adds	r3, #50	; 0x32
 8001618:	fbb3 f3f9 	udiv	r3, r3, r9
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001622:	f7ff fbfb 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
 8001626:	6862      	ldr	r2, [r4, #4]
 8001628:	4368      	muls	r0, r5
 800162a:	0052      	lsls	r2, r2, #1
 800162c:	fbb0 faf2 	udiv	sl, r0, r2
 8001630:	f7ff fbf4 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
 8001634:	e7b9      	b.n	80015aa <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001636:	429e      	cmp	r6, r3
 8001638:	d002      	beq.n	8001640 <UART_SetConfig+0x148>
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <UART_SetConfig+0x230>)
 800163c:	429e      	cmp	r6, r3
 800163e:	d140      	bne.n	80016c2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001640:	f7ff fbfc 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
 8001644:	6867      	ldr	r7, [r4, #4]
 8001646:	2519      	movs	r5, #25
 8001648:	f04f 0964 	mov.w	r9, #100	; 0x64
 800164c:	fb05 f300 	mul.w	r3, r5, r0
 8001650:	00bf      	lsls	r7, r7, #2
 8001652:	fbb3 f3f7 	udiv	r3, r3, r7
 8001656:	fbb3 f3f9 	udiv	r3, r3, r9
 800165a:	011f      	lsls	r7, r3, #4
 800165c:	f7ff fbee 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
 8001660:	6863      	ldr	r3, [r4, #4]
 8001662:	4368      	muls	r0, r5
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	fbb0 f8f3 	udiv	r8, r0, r3
 800166a:	f7ff fbe7 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
 800166e:	6863      	ldr	r3, [r4, #4]
 8001670:	4368      	muls	r0, r5
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fbb0 f3f3 	udiv	r3, r0, r3
 8001678:	fbb3 f3f9 	udiv	r3, r3, r9
 800167c:	fb09 8313 	mls	r3, r9, r3, r8
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	3332      	adds	r3, #50	; 0x32
 8001684:	fbb3 f3f9 	udiv	r3, r3, r9
 8001688:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800168c:	f7ff fbd6 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
 8001690:	6862      	ldr	r2, [r4, #4]
 8001692:	4368      	muls	r0, r5
 8001694:	0092      	lsls	r2, r2, #2
 8001696:	fbb0 faf2 	udiv	sl, r0, r2
 800169a:	f7ff fbcf 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800169e:	6863      	ldr	r3, [r4, #4]
 80016a0:	4368      	muls	r0, r5
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80016ac:	fb09 a313 	mls	r3, r9, r3, sl
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	3332      	adds	r3, #50	; 0x32
 80016b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	ea43 0308 	orr.w	r3, r3, r8
 80016c0:	e783      	b.n	80015ca <UART_SetConfig+0xd2>
 80016c2:	f7ff fbab 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
 80016c6:	6867      	ldr	r7, [r4, #4]
 80016c8:	2519      	movs	r5, #25
 80016ca:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016ce:	fb05 f300 	mul.w	r3, r5, r0
 80016d2:	00bf      	lsls	r7, r7, #2
 80016d4:	fbb3 f3f7 	udiv	r3, r3, r7
 80016d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80016dc:	011f      	lsls	r7, r3, #4
 80016de:	f7ff fb9d 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
 80016e2:	6863      	ldr	r3, [r4, #4]
 80016e4:	4368      	muls	r0, r5
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fbb0 f8f3 	udiv	r8, r0, r3
 80016ec:	f7ff fb96 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	4368      	muls	r0, r5
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80016fe:	fb09 8313 	mls	r3, r9, r3, r8
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	3332      	adds	r3, #50	; 0x32
 8001706:	fbb3 f3f9 	udiv	r3, r3, r9
 800170a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800170e:	f7ff fb85 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
 8001712:	6862      	ldr	r2, [r4, #4]
 8001714:	4368      	muls	r0, r5
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	fbb0 faf2 	udiv	sl, r0, r2
 800171c:	f7ff fb7e 	bl	8000e1c <HAL_RCC_GetPCLK1Freq>
 8001720:	e7bd      	b.n	800169e <UART_SetConfig+0x1a6>
 8001722:	bf00      	nop
 8001724:	40011000 	.word	0x40011000
 8001728:	40011400 	.word	0x40011400

0800172c <HAL_UART_Init>:
{
 800172c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800172e:	4604      	mov	r4, r0
 8001730:	b340      	cbz	r0, 8001784 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001732:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001736:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800173a:	b91b      	cbnz	r3, 8001744 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800173c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001740:	f000 fd66 	bl	8002210 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001744:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001746:	2324      	movs	r3, #36	; 0x24
 8001748:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800174c:	68d3      	ldr	r3, [r2, #12]
 800174e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001752:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001754:	4620      	mov	r0, r4
 8001756:	f7ff fecf 	bl	80014f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001762:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800176a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001772:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001774:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001776:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001778:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800177a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800177e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001782:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001784:	2001      	movs	r0, #1
}
 8001786:	bd10      	pop	{r4, pc}

08001788 <set_pwm_ch1>:
	My = (int) (MR_Data[2] << 8) + MR_Data[3];
	Mz = (int) (MR_Data[4] << 8) + MR_Data[5];
	dir=180* atan2((double) My,(double) Mx)/M_PI;
}

void set_pwm_ch1(int value){
 8001788:	b500      	push	{lr}
 800178a:	b089      	sub	sp, #36	; 0x24
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = value;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178c:	2200      	movs	r2, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178e:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = value;
 8001790:	9002      	str	r0, [sp, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001792:	a901      	add	r1, sp, #4
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <set_pwm_ch1+0x2c>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001796:	9301      	str	r3, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001798:	9203      	str	r2, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179a:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179c:	f7ff fe04 	bl	80013a8 <HAL_TIM_PWM_ConfigChannel>
 80017a0:	4601      	mov	r1, r0
 80017a2:	b100      	cbz	r0, 80017a6 <set_pwm_ch1+0x1e>
 80017a4:	e7fe      	b.n	80017a4 <set_pwm_ch1+0x1c>
	{
	  _Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017a6:	4803      	ldr	r0, [pc, #12]	; (80017b4 <set_pwm_ch1+0x2c>)
 80017a8:	f7ff fe6c 	bl	8001484 <HAL_TIM_PWM_Start>
}
 80017ac:	b009      	add	sp, #36	; 0x24
 80017ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80017b2:	bf00      	nop
 80017b4:	20000118 	.word	0x20000118

080017b8 <set_pwm_ch2>:

void set_pwm_ch2(int value){
 80017b8:	b500      	push	{lr}
 80017ba:	b089      	sub	sp, #36	; 0x24
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017bc:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = value;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017be:	2204      	movs	r2, #4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c0:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = value;
 80017c2:	9002      	str	r0, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c4:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c6:	eb0d 0102 	add.w	r1, sp, r2
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <set_pwm_ch2+0x30>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017cc:	9303      	str	r3, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ce:	9305      	str	r3, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017d0:	f7ff fdea 	bl	80013a8 <HAL_TIM_PWM_ConfigChannel>
 80017d4:	b100      	cbz	r0, 80017d8 <set_pwm_ch2+0x20>
 80017d6:	e7fe      	b.n	80017d6 <set_pwm_ch2+0x1e>
	{
	  _Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017d8:	2104      	movs	r1, #4
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <set_pwm_ch2+0x30>)
 80017dc:	f7ff fe52 	bl	8001484 <HAL_TIM_PWM_Start>
}
 80017e0:	b009      	add	sp, #36	; 0x24
 80017e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80017e6:	bf00      	nop
 80017e8:	20000118 	.word	0x20000118

080017ec <send_sonar_pulse>:

void send_sonar_pulse(void){
 80017ec:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET); //positive edge of pulse
 80017ee:	2201      	movs	r2, #1
	__HAL_TIM_SET_COUNTER(&htim2,0); //set counter to 0
 80017f0:	4c0d      	ldr	r4, [pc, #52]	; (8001828 <send_sonar_pulse+0x3c>)
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET); //positive edge of pulse
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <send_sonar_pulse+0x40>)
 80017f4:	4611      	mov	r1, r2
 80017f6:	f7ff f83d 	bl	8000874 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim2,0); //set counter to 0
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2); //start counter, maybe not needed?
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff fb9f 	bl	8000f44 <HAL_TIM_Base_Start>
	while(1){
		if(__HAL_TIM_GET_COUNTER(&htim2)==1){ //timer is prescaled so that 1 count is 10us
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800180a:	2901      	cmp	r1, #1
 800180c:	d1fc      	bne.n	8001808 <send_sonar_pulse+0x1c>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET); //pulse negative edge
 800180e:	2200      	movs	r2, #0
 8001810:	4806      	ldr	r0, [pc, #24]	; (800182c <send_sonar_pulse+0x40>)
 8001812:	f7ff f82f 	bl	8000874 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop(&htim2);
 8001816:	4804      	ldr	r0, [pc, #16]	; (8001828 <send_sonar_pulse+0x3c>)
 8001818:	f7ff fba1 	bl	8000f5e <HAL_TIM_Base_Stop>
			break;
		}
	}
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800181c:	2007      	movs	r0, #7

}
 800181e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001822:	f7fe bf09 	b.w	8000638 <HAL_NVIC_EnableIRQ>
 8001826:	bf00      	nop
 8001828:	200001b4 	.word	0x200001b4
 800182c:	40020000 	.word	0x40020000

08001830 <send_sonar_pulse2>:

void send_sonar_pulse2(void){
 8001830:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //positive edge of pulse
	__HAL_TIM_SET_COUNTER(&htim4,0); //set counter to 0
 8001832:	4c0f      	ldr	r4, [pc, #60]	; (8001870 <send_sonar_pulse2+0x40>)
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //positive edge of pulse
 8001834:	480f      	ldr	r0, [pc, #60]	; (8001874 <send_sonar_pulse2+0x44>)
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183c:	f7ff f81a 	bl	8000874 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim4,0); //set counter to 0
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim4); //start counter, maybe not needed?
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff fb7c 	bl	8000f44 <HAL_TIM_Base_Start>
	while(1){
		if(__HAL_TIM_GET_COUNTER(&htim4)==1){ //timer is prescaled so that 1 count is 10us
 800184c:	6822      	ldr	r2, [r4, #0]
 800184e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001850:	2b01      	cmp	r3, #1
 8001852:	d1fc      	bne.n	800184e <send_sonar_pulse2+0x1e>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET); //pulse negative edge
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <send_sonar_pulse2+0x44>)
 800185c:	f7ff f80a 	bl	8000874 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop(&htim4);
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <send_sonar_pulse2+0x40>)
 8001862:	f7ff fb7c 	bl	8000f5e <HAL_TIM_Base_Stop>
			break;
		}
	}
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001866:	200a      	movs	r0, #10
}
 8001868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800186c:	f7fe bee4 	b.w	8000638 <HAL_NVIC_EnableIRQ>
 8001870:	20000040 	.word	0x20000040
 8001874:	40020000 	.word	0x40020000

08001878 <send_sonar_pulse3>:

void send_sonar_pulse3(void){
 8001878:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET); //positive edge of pulse
	__HAL_TIM_SET_COUNTER(&htim5,0); //set counter to 0
 800187a:	4c0e      	ldr	r4, [pc, #56]	; (80018b4 <send_sonar_pulse3+0x3c>)
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET); //positive edge of pulse
 800187c:	480e      	ldr	r0, [pc, #56]	; (80018b8 <send_sonar_pulse3+0x40>)
 800187e:	2201      	movs	r2, #1
 8001880:	2102      	movs	r1, #2
 8001882:	f7fe fff7 	bl	8000874 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim5,0); //set counter to 0
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim5); //start counter, maybe not needed?
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff fb59 	bl	8000f44 <HAL_TIM_Base_Start>
	while(1){
		if(__HAL_TIM_GET_COUNTER(&htim5)==1){ //timer is prescaled so that 1 count is 10us
 8001892:	6822      	ldr	r2, [r4, #0]
 8001894:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001896:	2b01      	cmp	r3, #1
 8001898:	d1fc      	bne.n	8001894 <send_sonar_pulse3+0x1c>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET); //pulse negative edge
 800189a:	2200      	movs	r2, #0
 800189c:	2102      	movs	r1, #2
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <send_sonar_pulse3+0x40>)
 80018a0:	f7fe ffe8 	bl	8000874 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop(&htim5);
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <send_sonar_pulse3+0x3c>)
 80018a6:	f7ff fb5a 	bl	8000f5e <HAL_TIM_Base_Stop>
			break;
		}
	}
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018aa:	2006      	movs	r0, #6
}
 80018ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018b0:	f7fe bec2 	b.w	8000638 <HAL_NVIC_EnableIRQ>
 80018b4:	200000d8 	.word	0x200000d8
 80018b8:	40020800 	.word	0x40020800

080018bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018bc:	b530      	push	{r4, r5, lr}
 80018be:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	2200      	movs	r2, #0
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <SystemClock_Config+0xa4>)
 80018c4:	9201      	str	r2, [sp, #4]
 80018c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80018c8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80018cc:	6419      	str	r1, [r3, #64]	; 0x40
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d0:	4924      	ldr	r1, [pc, #144]	; (8001964 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018da:	9202      	str	r2, [sp, #8]
 80018dc:	680b      	ldr	r3, [r1, #0]
 80018de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ea:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f0:	9302      	str	r3, [sp, #8]
 80018f2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f4:	2301      	movs	r3, #1
 80018f6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80018f8:	2310      	movs	r3, #16
 80018fa:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018fc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018fe:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001902:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001904:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001906:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001908:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800190c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001910:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001912:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001914:	f7ff f832 	bl	800097c <HAL_RCC_OscConfig>
 8001918:	b100      	cbz	r0, 800191c <SystemClock_Config+0x60>
 800191a:	e7fe      	b.n	800191a <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191c:	230f      	movs	r3, #15
 800191e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001926:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001928:	4621      	mov	r1, r4
 800192a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800192e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001930:	f7ff f9d4 	bl	8000cdc <HAL_RCC_ClockConfig>
 8001934:	4604      	mov	r4, r0
 8001936:	b100      	cbz	r0, 800193a <SystemClock_Config+0x7e>
 8001938:	e7fe      	b.n	8001938 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800193a:	f7ff fa69 	bl	8000e10 <HAL_RCC_GetHCLKFreq>
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	fbb0 f0f3 	udiv	r0, r0, r3
 8001946:	f7fe fe91 	bl	800066c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800194a:	4628      	mov	r0, r5
 800194c:	f7fe fea4 	bl	8000698 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001950:	4622      	mov	r2, r4
 8001952:	4621      	mov	r1, r4
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7fe fe3a 	bl	80005d0 <HAL_NVIC_SetPriority>
}
 800195c:	b015      	add	sp, #84	; 0x54
 800195e:	bd30      	pop	{r4, r5, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	40007000 	.word	0x40007000

08001968 <main>:
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b092      	sub	sp, #72	; 0x48
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196c:	2400      	movs	r4, #0
  HAL_Init();
 800196e:	f7fe fddd 	bl	800052c <HAL_Init>
  SystemClock_Config();
 8001972:	f7ff ffa3 	bl	80018bc <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	4b9e      	ldr	r3, [pc, #632]	; (8001bf0 <main+0x288>)
 8001978:	9401      	str	r4, [sp, #4]
 800197a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800197c:	489d      	ldr	r0, [pc, #628]	; (8001bf4 <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800197e:	4e9e      	ldr	r6, [pc, #632]	; (8001bf8 <main+0x290>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001980:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8001c30 <main+0x2c8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001984:	f042 0204 	orr.w	r2, r2, #4
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
 800198a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800198c:	f002 0204 	and.w	r2, r2, #4
 8001990:	9201      	str	r2, [sp, #4]
 8001992:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001994:	9402      	str	r4, [sp, #8]
 8001996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001998:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800199c:	631a      	str	r2, [r3, #48]	; 0x30
 800199e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80019a4:	9202      	str	r2, [sp, #8]
 80019a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	9403      	str	r4, [sp, #12]
 80019aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
 80019b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b4:	f002 0201 	and.w	r2, r2, #1
 80019b8:	9203      	str	r2, [sp, #12]
 80019ba:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	9404      	str	r4, [sp, #16]
 80019be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c0:	f042 0202 	orr.w	r2, r2, #2
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80019ce:	4622      	mov	r2, r4
 80019d0:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80019d4:	f7fe ff4e 	bl	8000874 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80019d8:	4622      	mov	r2, r4
 80019da:	f240 1121 	movw	r1, #289	; 0x121
 80019de:	4887      	ldr	r0, [pc, #540]	; (8001bfc <main+0x294>)
 80019e0:	f7fe ff48 	bl	8000874 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2180      	movs	r1, #128	; 0x80
 80019e8:	4882      	ldr	r0, [pc, #520]	; (8001bf4 <main+0x28c>)
 80019ea:	f7fe ff43 	bl	8000874 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80019ee:	4622      	mov	r2, r4
 80019f0:	2168      	movs	r1, #104	; 0x68
 80019f2:	4883      	ldr	r0, [pc, #524]	; (8001c00 <main+0x298>)
 80019f4:	f7fe ff3e 	bl	8000874 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80019f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fc:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019fe:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a00:	4b80      	ldr	r3, [pc, #512]	; (8001c04 <main+0x29c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a02:	487c      	ldr	r0, [pc, #496]	; (8001bf4 <main+0x28c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a04:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a06:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f7fe fe57 	bl	80006bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0e:	a90b      	add	r1, sp, #44	; 0x2c
 8001a10:	4878      	ldr	r0, [pc, #480]	; (8001bf4 <main+0x28c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a12:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a14:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	f7fe fe50 	bl	80006bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001a1c:	2382      	movs	r3, #130	; 0x82
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	a90b      	add	r1, sp, #44	; 0x2c
 8001a20:	4874      	ldr	r0, [pc, #464]	; (8001bf4 <main+0x28c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001a22:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a26:	f04f 0828 	mov.w	r8, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f7fe fe45 	bl	80006bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a32:	a90b      	add	r1, sp, #44	; 0x2c
 8001a34:	486f      	ldr	r0, [pc, #444]	; (8001bf4 <main+0x28c>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a36:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	f7fe fe3c 	bl	80006bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin|GPIO_PIN_8;
 8001a44:	f240 1321 	movw	r3, #289	; 0x121
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	a90b      	add	r1, sp, #44	; 0x2c
 8001a4a:	486c      	ldr	r0, [pc, #432]	; (8001bfc <main+0x294>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin|GPIO_PIN_8;
 8001a4c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	950c      	str	r5, [sp, #48]	; 0x30

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a50:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f7fe fe31 	bl	80006bc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	a90b      	add	r1, sp, #44	; 0x2c
 8001a5c:	4867      	ldr	r0, [pc, #412]	; (8001bfc <main+0x294>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a5e:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a60:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f7fe fe2a 	bl	80006bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001a68:	2314      	movs	r3, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	a90b      	add	r1, sp, #44	; 0x2c
 8001a6c:	4864      	ldr	r0, [pc, #400]	; (8001c00 <main+0x298>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001a6e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a70:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f7fe fe22 	bl	80006bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001a78:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	a90b      	add	r1, sp, #44	; 0x2c
 8001a7e:	485f      	ldr	r0, [pc, #380]	; (8001bfc <main+0x294>)
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001a80:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f7fe fe18 	bl	80006bc <HAL_GPIO_Init>
  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	a90b      	add	r1, sp, #44	; 0x2c
 8001a8e:	485c      	ldr	r0, [pc, #368]	; (8001c00 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a92:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f7fe fe0f 	bl	80006bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a9e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	4857      	ldr	r0, [pc, #348]	; (8001c00 <main+0x298>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aa2:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aaa:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f7fe fe06 	bl	80006bc <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8001ab0:	4855      	ldr	r0, [pc, #340]	; (8001c08 <main+0x2a0>)
  huart2.Init.BaudRate = 115200;
 8001ab2:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <main+0x2a4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab4:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001ab6:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 8001aba:	e880 0028 	stmia.w	r0, {r3, r5}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001abe:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ac2:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aca:	f7ff fe2f 	bl	800172c <HAL_UART_Init>
 8001ace:	b100      	cbz	r0, 8001ad2 <main+0x16a>
 8001ad0:	e7fe      	b.n	8001ad0 <main+0x168>
  hi2c1.Instance = I2C1;
 8001ad2:	4b4f      	ldr	r3, [pc, #316]	; (8001c10 <main+0x2a8>)
  hi2c1.Init.ClockSpeed = 100000;
 8001ad4:	4a4f      	ldr	r2, [pc, #316]	; (8001c14 <main+0x2ac>)
 8001ad6:	4c50      	ldr	r4, [pc, #320]	; (8001c18 <main+0x2b0>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad8:	6098      	str	r0, [r3, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001ada:	e883 0014 	stmia.w	r3, {r2, r4}
  hi2c1.Init.OwnAddress1 = 0;
 8001ade:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae4:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ae6:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae8:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aea:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aec:	4618      	mov	r0, r3
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aee:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af0:	f7fe fed6 	bl	80008a0 <HAL_I2C_Init>
 8001af4:	b100      	cbz	r0, 8001af8 <main+0x190>
 8001af6:	e7fe      	b.n	8001af6 <main+0x18e>
  htim3.Instance = TIM3;
 8001af8:	4c48      	ldr	r4, [pc, #288]	; (8001c1c <main+0x2b4>)
  htim3.Init.Prescaler = 7;
 8001afa:	4949      	ldr	r1, [pc, #292]	; (8001c20 <main+0x2b8>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 7;
 8001afe:	2307      	movs	r3, #7
 8001b00:	e884 000a 	stmia.w	r4, {r1, r3}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b04:	6120      	str	r0, [r4, #16]
  htim3.Init.Period = 4000;
 8001b06:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b0a:	4620      	mov	r0, r4
  htim3.Init.Period = 4000;
 8001b0c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b0e:	f7ff fbeb 	bl	80012e8 <HAL_TIM_Base_Init>
 8001b12:	b100      	cbz	r0, 8001b16 <main+0x1ae>
 8001b14:	e7fe      	b.n	8001b14 <main+0x1ac>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b16:	ad12      	add	r5, sp, #72	; 0x48
 8001b18:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001b1c:	f845 7d2c 	str.w	r7, [r5, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7ff fa33 	bl	8000f8e <HAL_TIM_ConfigClockSource>
 8001b28:	b100      	cbz	r0, 8001b2c <main+0x1c4>
 8001b2a:	e7fe      	b.n	8001b2a <main+0x1c2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff fbf5 	bl	800131c <HAL_TIM_PWM_Init>
 8001b32:	b100      	cbz	r0, 8001b36 <main+0x1ce>
 8001b34:	e7fe      	b.n	8001b34 <main+0x1cc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b3a:	a905      	add	r1, sp, #20
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff fcb7 	bl	80014b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4602      	mov	r2, r0
 8001b44:	b100      	cbz	r0, 8001b48 <main+0x1e0>
 8001b46:	e7fe      	b.n	8001b46 <main+0x1de>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b48:	2360      	movs	r3, #96	; 0x60
 8001b4a:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.Pulse = 2000;
 8001b4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b52:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b54:	a90b      	add	r1, sp, #44	; 0x2c
 8001b56:	4620      	mov	r0, r4
  sConfigOC.Pulse = 2000;
 8001b58:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5a:	f7ff fc25 	bl	80013a8 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	b100      	cbz	r0, 8001b62 <main+0x1fa>
 8001b60:	e7fe      	b.n	8001b60 <main+0x1f8>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b62:	2204      	movs	r2, #4
 8001b64:	a90b      	add	r1, sp, #44	; 0x2c
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff fc1e 	bl	80013a8 <HAL_TIM_PWM_ConfigChannel>
 8001b6c:	4606      	mov	r6, r0
 8001b6e:	b100      	cbz	r0, 8001b72 <main+0x20a>
 8001b70:	e7fe      	b.n	8001b70 <main+0x208>
  HAL_TIM_MspPostInit(&htim3);
 8001b72:	4620      	mov	r0, r4
 8001b74:	f000 fb34 	bl	80021e0 <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 8001b78:	4c2a      	ldr	r4, [pc, #168]	; (8001c24 <main+0x2bc>)
  htim1.Init.Prescaler = 8400;
 8001b7a:	4a2b      	ldr	r2, [pc, #172]	; (8001c28 <main+0x2c0>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	60a6      	str	r6, [r4, #8]
  htim1.Init.Prescaler = 8400;
 8001b7e:	f242 03d0 	movw	r3, #8400	; 0x20d0
 8001b82:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b86:	4620      	mov	r0, r4
  htim1.Init.Period = 10000;
 8001b88:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b8c:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	6126      	str	r6, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b90:	6166      	str	r6, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b92:	f7ff fba9 	bl	80012e8 <HAL_TIM_Base_Init>
 8001b96:	b100      	cbz	r0, 8001b9a <main+0x232>
 8001b98:	e7fe      	b.n	8001b98 <main+0x230>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b9a:	a90b      	add	r1, sp, #44	; 0x2c
 8001b9c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9e:	970b      	str	r7, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ba0:	f7ff f9f5 	bl	8000f8e <HAL_TIM_ConfigClockSource>
 8001ba4:	b100      	cbz	r0, 8001ba8 <main+0x240>
 8001ba6:	e7fe      	b.n	8001ba6 <main+0x23e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001baa:	4629      	mov	r1, r5
 8001bac:	481d      	ldr	r0, [pc, #116]	; (8001c24 <main+0x2bc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bb2:	f7ff fc7d 	bl	80014b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	b100      	cbz	r0, 8001bba <main+0x252>
 8001bb8:	e7fe      	b.n	8001bb8 <main+0x250>
  htim2.Instance = TIM2;
 8001bba:	4c1c      	ldr	r4, [pc, #112]	; (8001c2c <main+0x2c4>)
  htim2.Init.Prescaler = 840;
 8001bbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bc0:	f44f 7752 	mov.w	r7, #840	; 0x348
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc4:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 4294967295;
 8001bc6:	f04f 38ff 	mov.w	r8, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bcc:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 840;
 8001bce:	e884 0088 	stmia.w	r4, {r3, r7}
  htim2.Init.Period = 4294967295;
 8001bd2:	f8c4 800c 	str.w	r8, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bd6:	f7ff fb87 	bl	80012e8 <HAL_TIM_Base_Init>
 8001bda:	b100      	cbz	r0, 8001bde <main+0x276>
 8001bdc:	e7fe      	b.n	8001bdc <main+0x274>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bde:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001be2:	a90b      	add	r1, sp, #44	; 0x2c
 8001be4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be6:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001be8:	f7ff f9d1 	bl	8000f8e <HAL_TIM_ConfigClockSource>
 8001bec:	b310      	cbz	r0, 8001c34 <main+0x2cc>
 8001bee:	e7fe      	b.n	8001bee <main+0x286>
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	10310000 	.word	0x10310000
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	10210000 	.word	0x10210000
 8001c08:	200001f4 	.word	0x200001f4
 8001c0c:	40004400 	.word	0x40004400
 8001c10:	20000080 	.word	0x20000080
 8001c14:	40005400 	.word	0x40005400
 8001c18:	000186a0 	.word	0x000186a0
 8001c1c:	20000118 	.word	0x20000118
 8001c20:	40000400 	.word	0x40000400
 8001c24:	20000164 	.word	0x20000164
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	200001b4 	.word	0x200001b4
 8001c30:	10110000 	.word	0x10110000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c34:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c38:	4629      	mov	r1, r5
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f7ff fc38 	bl	80014b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c40:	b100      	cbz	r0, 8001c44 <main+0x2dc>
 8001c42:	e7fe      	b.n	8001c42 <main+0x2da>
  htim4.Instance = TIM4;
 8001c44:	4c69      	ldr	r4, [pc, #420]	; (8001dec <main+0x484>)
 8001c46:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <main+0x488>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	60a0      	str	r0, [r4, #8]
  htim4.Init.Prescaler = 840;
 8001c4a:	e884 0088 	stmia.w	r4, {r3, r7}
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4e:	6120      	str	r0, [r4, #16]
  htim4.Init.Period = 65535;
 8001c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c54:	4620      	mov	r0, r4
  htim4.Init.Period = 65535;
 8001c56:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c58:	f7ff fb46 	bl	80012e8 <HAL_TIM_Base_Init>
 8001c5c:	b100      	cbz	r0, 8001c60 <main+0x2f8>
 8001c5e:	e7fe      	b.n	8001c5e <main+0x2f6>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c60:	a90b      	add	r1, sp, #44	; 0x2c
 8001c62:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c64:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c66:	f7ff f992 	bl	8000f8e <HAL_TIM_ConfigClockSource>
 8001c6a:	b100      	cbz	r0, 8001c6e <main+0x306>
 8001c6c:	e7fe      	b.n	8001c6c <main+0x304>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c72:	4629      	mov	r1, r5
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff fc1b 	bl	80014b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7a:	b100      	cbz	r0, 8001c7e <main+0x316>
 8001c7c:	e7fe      	b.n	8001c7c <main+0x314>
  htim5.Instance = TIM5;
 8001c7e:	4c5d      	ldr	r4, [pc, #372]	; (8001df4 <main+0x48c>)
 8001c80:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <main+0x490>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c82:	60a0      	str	r0, [r4, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c86:	4620      	mov	r0, r4
  htim5.Init.Prescaler = 840;
 8001c88:	e884 0088 	stmia.w	r4, {r3, r7}
  htim5.Init.Period = 4294967295;
 8001c8c:	f8c4 800c 	str.w	r8, [r4, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c90:	f7ff fb2a 	bl	80012e8 <HAL_TIM_Base_Init>
 8001c94:	b100      	cbz	r0, 8001c98 <main+0x330>
 8001c96:	e7fe      	b.n	8001c96 <main+0x32e>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c98:	a90b      	add	r1, sp, #44	; 0x2c
 8001c9a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9c:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c9e:	f7ff f976 	bl	8000f8e <HAL_TIM_ConfigClockSource>
 8001ca2:	b100      	cbz	r0, 8001ca6 <main+0x33e>
 8001ca4:	e7fe      	b.n	8001ca4 <main+0x33c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca6:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca8:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001caa:	4629      	mov	r1, r5
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff fbff 	bl	80014b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb2:	b100      	cbz	r0, 8001cb6 <main+0x34e>
 8001cb4:	e7fe      	b.n	8001cb4 <main+0x34c>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4611      	mov	r1, r2
 8001cba:	2019      	movs	r0, #25
 8001cbc:	f7fe fc88 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cc0:	2019      	movs	r0, #25
 8001cc2:	f7fe fcb9 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4611      	mov	r1, r2
 8001cca:	2007      	movs	r0, #7
 8001ccc:	f7fe fc80 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cd0:	2007      	movs	r0, #7
 8001cd2:	f7fe fcb1 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4611      	mov	r1, r2
 8001cda:	2009      	movs	r0, #9
 8001cdc:	f7fe fc78 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ce0:	2009      	movs	r0, #9
 8001ce2:	f7fe fca9 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4611      	mov	r1, r2
 8001cea:	2008      	movs	r0, #8
 8001cec:	f7fe fc70 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001cf0:	2008      	movs	r0, #8
 8001cf2:	f7fe fca1 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	200a      	movs	r0, #10
 8001cfc:	f7fe fc68 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d00:	200a      	movs	r0, #10
 8001d02:	f7fe fc99 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	4611      	mov	r1, r2
 8001d0a:	2006      	movs	r0, #6
 8001d0c:	f7fe fc60 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d10:	2006      	movs	r0, #6
 8001d12:	f7fe fc91 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	4611      	mov	r1, r2
 8001d1a:	2017      	movs	r0, #23
 8001d1c:	f7fe fc58 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d20:	2017      	movs	r0, #23
 8001d22:	f7fe fc89 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	4611      	mov	r1, r2
 8001d2a:	2028      	movs	r0, #40	; 0x28
 8001d2c:	f7fe fc50 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d30:	2028      	movs	r0, #40	; 0x28
 8001d32:	f7fe fc81 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);//sonar
 8001d36:	2006      	movs	r0, #6
 8001d38:	f7fe fc8a 	bl	8000650 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);//sonar
 8001d3c:	2007      	movs	r0, #7
 8001d3e:	f7fe fc87 	bl	8000650 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);//sonar
 8001d42:	200a      	movs	r0, #10
 8001d44:	f7fe fc84 	bl	8000650 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);//photodiode
 8001d48:	2008      	movs	r0, #8
 8001d4a:	f7fe fc81 	bl	8000650 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);//photodiode
 8001d4e:	2009      	movs	r0, #9
 8001d50:	f7fe fc7e 	bl	8000650 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);//photodiode
 8001d54:	2017      	movs	r0, #23
 8001d56:	f7fe fc7b 	bl	8000650 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);//photodiode
 8001d5a:	2028      	movs	r0, #40	; 0x28
 8001d5c:	f7fe fc78 	bl	8000650 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);//photodiode
 8001d60:	2009      	movs	r0, #9
 8001d62:	f7fe fc69 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//photodiode
 8001d66:	2017      	movs	r0, #23
 8001d68:	f7fe fc66 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//photodiode
 8001d6c:	2028      	movs	r0, #40	; 0x28
 8001d6e:	f7fe fc63 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //start pwm
 8001d72:	2100      	movs	r1, #0
 8001d74:	4821      	ldr	r0, [pc, #132]	; (8001dfc <main+0x494>)
	  if (avoidance_on){
 8001d76:	4c22      	ldr	r4, [pc, #136]	; (8001e00 <main+0x498>)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //start pwm
 8001d78:	f7ff fb84 	bl	8001484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //start pwm
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	481f      	ldr	r0, [pc, #124]	; (8001dfc <main+0x494>)
 8001d80:	f7ff fb80 	bl	8001484 <HAL_TIM_PWM_Start>
  set_pwm_ch1(3000);
 8001d84:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d88:	f7ff fcfe 	bl	8001788 <set_pwm_ch1>
  set_pwm_ch2(3000);
 8001d8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d90:	f7ff fd12 	bl	80017b8 <set_pwm_ch2>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	481a      	ldr	r0, [pc, #104]	; (8001e04 <main+0x49c>)
 8001d9a:	f7fe fd6b 	bl	8000874 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2140      	movs	r1, #64	; 0x40
 8001da2:	4819      	ldr	r0, [pc, #100]	; (8001e08 <main+0x4a0>)
 8001da4:	f7fe fd66 	bl	8000874 <HAL_GPIO_WritePin>
  turning=0;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <main+0x4a4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
  dist0=10;
 8001dae:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <main+0x4a8>)
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <main+0x4ac>)
 8001db2:	6013      	str	r3, [r2, #0]
  dist1=10;
 8001db4:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <main+0x4b0>)
 8001db6:	6013      	str	r3, [r2, #0]
  dist4=10;
 8001db8:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <main+0x4b4>)
 8001dba:	6013      	str	r3, [r2, #0]
	  send_sonar_pulse2();
 8001dbc:	f7ff fd38 	bl	8001830 <send_sonar_pulse2>
	  HAL_Delay(10);
 8001dc0:	200a      	movs	r0, #10
 8001dc2:	f7fe fbdf 	bl	8000584 <HAL_Delay>
	  send_sonar_pulse();
 8001dc6:	f7ff fd11 	bl	80017ec <send_sonar_pulse>
	  HAL_Delay(10);
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f7fe fbda 	bl	8000584 <HAL_Delay>
	  send_sonar_pulse3();
 8001dd0:	f7ff fd52 	bl	8001878 <send_sonar_pulse3>
	  HAL_Delay(10);
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f7fe fbd5 	bl	8000584 <HAL_Delay>
	  if (avoidance_on){
 8001dda:	7823      	ldrb	r3, [r4, #0]
 8001ddc:	b113      	cbz	r3, 8001de4 <main+0x47c>
		  avoid();
 8001dde:	f000 f895 	bl	8001f0c <avoid>
 8001de2:	e7eb      	b.n	8001dbc <main+0x454>
		  check_fire();
 8001de4:	f000 f904 	bl	8001ff0 <check_fire>
 8001de8:	e7e8      	b.n	8001dbc <main+0x454>
 8001dea:	bf00      	nop
 8001dec:	20000040 	.word	0x20000040
 8001df0:	40000800 	.word	0x40000800
 8001df4:	200000d8 	.word	0x200000d8
 8001df8:	40000c00 	.word	0x40000c00
 8001dfc:	20000118 	.word	0x20000118
 8001e00:	20000009 	.word	0x20000009
 8001e04:	40020800 	.word	0x40020800
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	20000035 	.word	0x20000035
 8001e10:	20000160 	.word	0x20000160
 8001e14:	41200000 	.word	0x41200000
 8001e18:	200001a0 	.word	0x200001a0
 8001e1c:	20000114 	.word	0x20000114

08001e20 <start>:
extern volatile float dist0,dist1,dist4;
extern volatile uint8_t turning,fire_var,attac,avoidance_on;
extern int fake_flag,fake_timer;


void start(void){
 8001e20:	b508      	push	{r3, lr}
	  set_pwm_ch1(3000);
 8001e22:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e26:	f7ff fcaf 	bl	8001788 <set_pwm_ch1>
	  set_pwm_ch2(3000);
 8001e2a:	f640 30b8 	movw	r0, #3000	; 0xbb8

}
 8001e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  set_pwm_ch2(3000);
 8001e32:	f7ff bcc1 	b.w	80017b8 <set_pwm_ch2>
	...

08001e38 <left>:

void left(void){
 8001e38:	b508      	push	{r3, lr}
	  start();
 8001e3a:	f7ff fff1 	bl	8001e20 <start>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	4809      	ldr	r0, [pc, #36]	; (8001e68 <left+0x30>)
 8001e44:	f7fe fd16 	bl	8000874 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2140      	movs	r1, #64	; 0x40
 8001e4c:	4807      	ldr	r0, [pc, #28]	; (8001e6c <left+0x34>)
 8001e4e:	f7fe fd11 	bl	8000874 <HAL_GPIO_WritePin>
	  //set_pwm_ch1(1000);


	  set_pwm_ch1(2000);
 8001e52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e56:	f7ff fc97 	bl	8001788 <set_pwm_ch1>
	  set_pwm_ch2(2000);
 8001e5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 8001e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  set_pwm_ch2(2000);
 8001e62:	f7ff bca9 	b.w	80017b8 <set_pwm_ch2>
 8001e66:	bf00      	nop
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020400 	.word	0x40020400

08001e70 <right>:

void right(void){
 8001e70:	b508      	push	{r3, lr}
	  start();
 8001e72:	f7ff ffd5 	bl	8001e20 <start>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8001e76:	2201      	movs	r2, #1
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <right+0x30>)
 8001e7c:	f7fe fcfa 	bl	8000874 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2140      	movs	r1, #64	; 0x40
 8001e84:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <right+0x34>)
 8001e86:	f7fe fcf5 	bl	8000874 <HAL_GPIO_WritePin>
	  //set_pwm_ch2(1000);

	  set_pwm_ch1(2000);
 8001e8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e8e:	f7ff fc7b 	bl	8001788 <set_pwm_ch1>
	  set_pwm_ch2(2000);
 8001e92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 8001e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  set_pwm_ch2(2000);
 8001e9a:	f7ff bc8d 	b.w	80017b8 <set_pwm_ch2>
 8001e9e:	bf00      	nop
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020400 	.word	0x40020400

08001ea8 <forward>:

void forward(void){
 8001ea8:	b508      	push	{r3, lr}
	  start();
 8001eaa:	f7ff ffb9 	bl	8001e20 <start>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <forward+0x20>)
 8001eb4:	f7fe fcde 	bl	8000874 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2140      	movs	r1, #64	; 0x40
 8001ebc:	4803      	ldr	r0, [pc, #12]	; (8001ecc <forward+0x24>)
}
 8001ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8001ec2:	f7fe bcd7 	b.w	8000874 <HAL_GPIO_WritePin>
 8001ec6:	bf00      	nop
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020400 	.word	0x40020400

08001ed0 <stop>:
void backward(void){
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
}

void stop(void){
 8001ed0:	b508      	push	{r3, lr}
	  set_pwm_ch1(0);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fc58 	bl	8001788 <set_pwm_ch1>
	  set_pwm_ch2(0);
 8001ed8:	2000      	movs	r0, #0
}
 8001eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  set_pwm_ch2(0);
 8001ede:	f7ff bc6b 	b.w	80017b8 <set_pwm_ch2>
	...

08001ee4 <fire>:


void fire(void){
 8001ee4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8001ee6:	4c08      	ldr	r4, [pc, #32]	; (8001f08 <fire+0x24>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2120      	movs	r1, #32
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7fe fcc1 	bl	8000874 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001ef2:	20c8      	movs	r0, #200	; 0xc8
 8001ef4:	f7fe fb46 	bl	8000584 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 8001ef8:	4620      	mov	r0, r4
 8001efa:	2200      	movs	r2, #0
 8001efc:	2120      	movs	r1, #32
}
 8001efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 8001f02:	f7fe bcb7 	b.w	8000874 <HAL_GPIO_WritePin>
 8001f06:	bf00      	nop
 8001f08:	40020400 	.word	0x40020400

08001f0c <avoid>:

void avoid(void){
		if(dist4<=2){
 8001f0c:	4a32      	ldr	r2, [pc, #200]	; (8001fd8 <avoid+0xcc>)
 8001f0e:	4933      	ldr	r1, [pc, #204]	; (8001fdc <avoid+0xd0>)
 8001f10:	ed92 7a00 	vldr	s14, [r2]
 8001f14:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8001f18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void avoid(void){
 8001f20:	b510      	push	{r4, lr}
			  if(dist0>dist1 && reset){
 8001f22:	ed91 7a00 	vldr	s14, [r1]
		if(dist4<=2){
 8001f26:	d819      	bhi.n	8001f5c <avoid+0x50>
			  if(dist0>dist1 && reset){
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <avoid+0xd4>)
 8001f2a:	4c2e      	ldr	r4, [pc, #184]	; (8001fe4 <avoid+0xd8>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f38:	dd05      	ble.n	8001f46 <avoid+0x3a>
 8001f3a:	7823      	ldrb	r3, [r4, #0]
 8001f3c:	b11b      	cbz	r3, 8001f46 <avoid+0x3a>
				  left();
 8001f3e:	f7ff ff7b 	bl	8001e38 <left>
			  }
		  }
		  else if(dist0 <=1.5 && reset){
			  left();
			  if(reset){
				  l++;
 8001f42:	4a29      	ldr	r2, [pc, #164]	; (8001fe8 <avoid+0xdc>)
 8001f44:	e004      	b.n	8001f50 <avoid+0x44>
			  else if(reset){
 8001f46:	7823      	ldrb	r3, [r4, #0]
 8001f48:	b1bb      	cbz	r3, 8001f7a <avoid+0x6e>
				  right();
 8001f4a:	f7ff ff91 	bl	8001e70 <right>
				  r++;
 8001f4e:	4a27      	ldr	r2, [pc, #156]	; (8001fec <avoid+0xe0>)
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	6013      	str	r3, [r2, #0]
				  reset=0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	7023      	strb	r3, [r4, #0]
 8001f5a:	bd10      	pop	{r4, pc}
		  else if(dist0 <=1.5 && reset){
 8001f5c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8001f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	d808      	bhi.n	8001f7c <avoid+0x70>
 8001f6a:	4c1e      	ldr	r4, [pc, #120]	; (8001fe4 <avoid+0xd8>)
 8001f6c:	7823      	ldrb	r3, [r4, #0]
 8001f6e:	b12b      	cbz	r3, 8001f7c <avoid+0x70>
			  left();
 8001f70:	f7ff ff62 	bl	8001e38 <left>
			  if(reset){
 8001f74:	7823      	ldrb	r3, [r4, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1e3      	bne.n	8001f42 <avoid+0x36>
 8001f7a:	bd10      	pop	{r4, pc}
				  reset=0;
			  }
		  }
		  else if(dist1 <=1.5 && reset){
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <avoid+0xd4>)
 8001f7e:	ed93 7a00 	vldr	s14, [r3]
 8001f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	d808      	bhi.n	8001f9e <avoid+0x92>
 8001f8c:	4c15      	ldr	r4, [pc, #84]	; (8001fe4 <avoid+0xd8>)
 8001f8e:	7820      	ldrb	r0, [r4, #0]
 8001f90:	b128      	cbz	r0, 8001f9e <avoid+0x92>
			  right();
 8001f92:	f7ff ff6d 	bl	8001e70 <right>
			  if(reset){
 8001f96:	7823      	ldrb	r3, [r4, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ee      	beq.n	8001f7a <avoid+0x6e>
 8001f9c:	e7d7      	b.n	8001f4e <avoid+0x42>
				  r++;
				  reset=0;
			  }
		  }
		  else if(dist4>4 && dist0>1.5 && dist1>1.5){
 8001f9e:	edd2 6a00 	vldr	s13, [r2]
 8001fa2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001fa6:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	dde4      	ble.n	8001f7a <avoid+0x6e>
 8001fb0:	ed91 7a00 	vldr	s14, [r1]
 8001fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	dddd      	ble.n	8001f7a <avoid+0x6e>
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fca:	ddd6      	ble.n	8001f7a <avoid+0x6e>
			  forward();
 8001fcc:	f7ff ff6c 	bl	8001ea8 <forward>
			  reset=1;
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <avoid+0xd8>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
		  }
}
 8001fd6:	e7d0      	b.n	8001f7a <avoid+0x6e>
 8001fd8:	20000114 	.word	0x20000114
 8001fdc:	20000160 	.word	0x20000160
 8001fe0:	200001a0 	.word	0x200001a0
 8001fe4:	2000000a 	.word	0x2000000a
 8001fe8:	2000002c 	.word	0x2000002c
 8001fec:	20000030 	.word	0x20000030

08001ff0 <check_fire>:
		avoid();
	}
}


void check_fire(void){
 8001ff0:	b508      	push	{r3, lr}

	if(fire_var){
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <check_fire+0x40>)
 8001ff4:	7813      	ldrb	r3, [r2, #0]
 8001ff6:	b1d3      	cbz	r3, 800202e <check_fire+0x3e>
		turning=0;
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <check_fire+0x44>)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	700b      	strb	r3, [r1, #0]
		attac=0;
 8001ffe:	490e      	ldr	r1, [pc, #56]	; (8002038 <check_fire+0x48>)
 8002000:	700b      	strb	r3, [r1, #0]
		fire_var=0;
 8002002:	7013      	strb	r3, [r2, #0]
		avoidance_on=1;
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <check_fire+0x4c>)
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
		forward();
 800200a:	f7ff ff4d 	bl	8001ea8 <forward>
		stop();
 800200e:	f7ff ff5f 	bl	8001ed0 <stop>
		//HAL_Delay(500);
		fire();
 8002012:	f7ff ff67 	bl	8001ee4 <fire>
		start();
 8002016:	f7ff ff03 	bl	8001e20 <start>
		forward();
 800201a:	f7ff ff45 	bl	8001ea8 <forward>
		//HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800201e:	2009      	movs	r0, #9
 8002020:	f7fe fb0a 	bl	8000638 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002024:	2017      	movs	r0, #23
	}


}
 8002026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800202a:	f7fe bb05 	b.w	8000638 <HAL_NVIC_EnableIRQ>
 800202e:	bd08      	pop	{r3, pc}
 8002030:	20000034 	.word	0x20000034
 8002034:	20000035 	.word	0x20000035
 8002038:	20000008 	.word	0x20000008
 800203c:	20000009 	.word	0x20000009

08002040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	4b22      	ldr	r3, [pc, #136]	; (80020cc <HAL_MspInit+0x8c>)
 8002044:	2400      	movs	r4, #0
 8002046:	9400      	str	r4, [sp, #0]
 8002048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800204a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800204e:	645a      	str	r2, [r3, #68]	; 0x44
 8002050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002052:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002056:	9200      	str	r2, [sp, #0]
 8002058:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	9401      	str	r4, [sp, #4]
 800205c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002070:	f7fe fa9c 	bl	80005ac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002074:	4622      	mov	r2, r4
 8002076:	4621      	mov	r1, r4
 8002078:	f06f 000b 	mvn.w	r0, #11
 800207c:	f7fe faa8 	bl	80005d0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002080:	4622      	mov	r2, r4
 8002082:	4621      	mov	r1, r4
 8002084:	f06f 000a 	mvn.w	r0, #10
 8002088:	f7fe faa2 	bl	80005d0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800208c:	4622      	mov	r2, r4
 800208e:	4621      	mov	r1, r4
 8002090:	f06f 0009 	mvn.w	r0, #9
 8002094:	f7fe fa9c 	bl	80005d0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002098:	4622      	mov	r2, r4
 800209a:	4621      	mov	r1, r4
 800209c:	f06f 0004 	mvn.w	r0, #4
 80020a0:	f7fe fa96 	bl	80005d0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80020a4:	4622      	mov	r2, r4
 80020a6:	4621      	mov	r1, r4
 80020a8:	f06f 0003 	mvn.w	r0, #3
 80020ac:	f7fe fa90 	bl	80005d0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80020b0:	4622      	mov	r2, r4
 80020b2:	4621      	mov	r1, r4
 80020b4:	f06f 0001 	mvn.w	r0, #1
 80020b8:	f7fe fa8a 	bl	80005d0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020bc:	4622      	mov	r2, r4
 80020be:	4621      	mov	r1, r4
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7fe fa84 	bl	80005d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c8:	b002      	add	sp, #8
 80020ca:	bd10      	pop	{r4, pc}
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80020d2:	6802      	ldr	r2, [r0, #0]
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_I2C_MspInit+0x48>)
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d11b      	bne.n	8002112 <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e0:	2312      	movs	r3, #18
 80020e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ec:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	eb0d 0103 	add.w	r1, sp, r3
 80020f2:	480a      	ldr	r0, [pc, #40]	; (800211c <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f6:	f7fe fae1 	bl	80006bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_I2C_MspInit+0x50>)
 8002100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002102:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002112:	b007      	add	sp, #28
 8002114:	f85d fb04 	ldr.w	pc, [sp], #4
 8002118:	40005400 	.word	0x40005400
 800211c:	40020400 	.word	0x40020400
 8002120:	40023800 	.word	0x40023800

08002124 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8002124:	6803      	ldr	r3, [r0, #0]
 8002126:	4a29      	ldr	r2, [pc, #164]	; (80021cc <HAL_TIM_Base_MspInit+0xa8>)
 8002128:	4293      	cmp	r3, r2
{
 800212a:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 800212c:	d10d      	bne.n	800214a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_TIM_Base_MspInit+0xac>)
 8002134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002146:	b006      	add	sp, #24
 8002148:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 800214a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214e:	d10c      	bne.n	800216a <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	9302      	str	r3, [sp, #8]
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_TIM_Base_MspInit+0xac>)
 8002156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	9302      	str	r3, [sp, #8]
 8002166:	9b02      	ldr	r3, [sp, #8]
 8002168:	e7ed      	b.n	8002146 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM3)
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <HAL_TIM_Base_MspInit+0xb0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d10c      	bne.n	800218a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <HAL_TIM_Base_MspInit+0xac>)
 8002176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002178:	f042 0202 	orr.w	r2, r2, #2
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	9303      	str	r3, [sp, #12]
 8002186:	9b03      	ldr	r3, [sp, #12]
 8002188:	e7dd      	b.n	8002146 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM4)
 800218a:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <HAL_TIM_Base_MspInit+0xb4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10c      	bne.n	80021aa <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	9304      	str	r3, [sp, #16]
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_TIM_Base_MspInit+0xac>)
 8002196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002198:	f042 0204 	orr.w	r2, r2, #4
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	9304      	str	r3, [sp, #16]
 80021a6:	9b04      	ldr	r3, [sp, #16]
 80021a8:	e7cd      	b.n	8002146 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM5)
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <HAL_TIM_Base_MspInit+0xb8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d1ca      	bne.n	8002146 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	9305      	str	r3, [sp, #20]
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_TIM_Base_MspInit+0xac>)
 80021b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021b8:	f042 0208 	orr.w	r2, r2, #8
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	9305      	str	r3, [sp, #20]
 80021c6:	9b05      	ldr	r3, [sp, #20]
}
 80021c8:	e7bd      	b.n	8002146 <HAL_TIM_Base_MspInit+0x22>
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800
 80021dc:	40000c00 	.word	0x40000c00

080021e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 80021e2:	6802      	ldr	r2, [r0, #0]
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_TIM_MspPostInit+0x28>)
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d10b      	bne.n	8002202 <HAL_TIM_MspPostInit+0x22>
  
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ea:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <HAL_TIM_MspPostInit+0x2c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f7fe fa5d 	bl	80006bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002202:	b007      	add	sp, #28
 8002204:	f85d fb04 	ldr.w	pc, [sp], #4
 8002208:	40000400 	.word	0x40000400
 800220c:	40020000 	.word	0x40020000

08002210 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002212:	6802      	ldr	r2, [r0, #0]
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_UART_MspInit+0x40>)
 8002216:	429a      	cmp	r2, r3
 8002218:	d117      	bne.n	800224a <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <HAL_UART_MspInit+0x44>)
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	6c11      	ldr	r1, [r2, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	480d      	ldr	r0, [pc, #52]	; (8002258 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002224:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002228:	6411      	str	r1, [r2, #64]	; 0x40
 800222a:	6c12      	ldr	r2, [r2, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	9303      	str	r3, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 800222e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002232:	9200      	str	r2, [sp, #0]
 8002234:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002238:	220c      	movs	r2, #12
 800223a:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800223c:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002244:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f7fe fa39 	bl	80006bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800224a:	b007      	add	sp, #28
 800224c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002250:	40004400 	.word	0x40004400
 8002254:	40023800 	.word	0x40023800
 8002258:	40020000 	.word	0x40020000

0800225c <NMI_Handler>:
 800225c:	4770      	bx	lr

0800225e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800225e:	e7fe      	b.n	800225e <HardFault_Handler>

08002260 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002260:	e7fe      	b.n	8002260 <MemManage_Handler>

08002262 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002262:	e7fe      	b.n	8002262 <BusFault_Handler>

08002264 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002264:	e7fe      	b.n	8002264 <UsageFault_Handler>

08002266 <SVC_Handler>:
 8002266:	4770      	bx	lr

08002268 <DebugMon_Handler>:
 8002268:	4770      	bx	lr

0800226a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800226c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226e:	f7fe f977 	bl	8000560 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002276:	f7fe ba1c 	b.w	80006b2 <HAL_SYSTICK_IRQHandler>
	...

0800227c <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 800227c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800227e:	2001      	movs	r0, #1
 8002280:	f7fe fb02 	bl	8000888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  uint32_t counter;
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)==GPIO_PIN_SET){
 8002284:	2101      	movs	r1, #1
 8002286:	4819      	ldr	r0, [pc, #100]	; (80022ec <EXTI0_IRQHandler+0x70>)
 8002288:	f7fe faee 	bl	8000868 <HAL_GPIO_ReadPin>
 800228c:	2801      	cmp	r0, #1
 800228e:	d105      	bne.n	800229c <EXTI0_IRQHandler+0x20>
		__HAL_TIM_SET_COUNTER(&htim5,0);
 8002290:	4817      	ldr	r0, [pc, #92]	; (80022f0 <EXTI0_IRQHandler+0x74>)
 8002292:	6803      	ldr	r3, [r0, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim5);
 8002298:	f7fe fe54 	bl	8000f44 <HAL_TIM_Base_Start>
		//count=__HAL_TIM_GET_COUNTER(&htim3);
	}
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)==GPIO_PIN_RESET){
 800229c:	2101      	movs	r1, #1
 800229e:	4813      	ldr	r0, [pc, #76]	; (80022ec <EXTI0_IRQHandler+0x70>)
 80022a0:	f7fe fae2 	bl	8000868 <HAL_GPIO_ReadPin>
 80022a4:	4602      	mov	r2, r0
 80022a6:	b9f8      	cbnz	r0, 80022e8 <EXTI0_IRQHandler+0x6c>
		counter=__HAL_TIM_GET_COUNTER(&htim5);
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <EXTI0_IRQHandler+0x74>)
		dist0= (float) counter/58;
 80022aa:	eddf 6a12 	vldr	s13, [pc, #72]	; 80022f4 <EXTI0_IRQHandler+0x78>
		counter=__HAL_TIM_GET_COUNTER(&htim5);
 80022ae:	681b      	ldr	r3, [r3, #0]
		if(dist0<1.5){
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_SET);
		}
		else{
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
 80022b0:	4811      	ldr	r0, [pc, #68]	; (80022f8 <EXTI0_IRQHandler+0x7c>)
		counter=__HAL_TIM_GET_COUNTER(&htim5);
 80022b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
		dist0= (float) counter/58;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <EXTI0_IRQHandler+0x80>)
 80022b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
 80022bc:	2120      	movs	r1, #32
		dist0= (float) counter/58;
 80022be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		if(dist0<1.5){
 80022c2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
		dist0= (float) counter/58;
 80022c6:	ed83 7a00 	vstr	s14, [r3]
		if(dist0<1.5){
 80022ca:	ed93 7a00 	vldr	s14, [r3]
 80022ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_SET);
 80022d6:	bf48      	it	mi
 80022d8:	2201      	movmi	r2, #1
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
 80022da:	f7fe facb 	bl	8000874 <HAL_GPIO_WritePin>
		}
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80022de:	2006      	movs	r0, #6

	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 80022e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80022e4:	f7fe b9b4 	b.w	8000650 <HAL_NVIC_DisableIRQ>
 80022e8:	bd08      	pop	{r3, pc}
 80022ea:	bf00      	nop
 80022ec:	40020800 	.word	0x40020800
 80022f0:	200000d8 	.word	0x200000d8
 80022f4:	42680000 	.word	0x42680000
 80022f8:	40020000 	.word	0x40020000
 80022fc:	20000160 	.word	0x20000160

08002300 <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 8002300:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002302:	2002      	movs	r0, #2
 8002304:	f7fe fac0 	bl	8000888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  uint32_t counter;
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==GPIO_PIN_SET){
 8002308:	2102      	movs	r1, #2
 800230a:	4819      	ldr	r0, [pc, #100]	; (8002370 <EXTI1_IRQHandler+0x70>)
 800230c:	f7fe faac 	bl	8000868 <HAL_GPIO_ReadPin>
 8002310:	2801      	cmp	r0, #1
 8002312:	d105      	bne.n	8002320 <EXTI1_IRQHandler+0x20>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8002314:	4817      	ldr	r0, [pc, #92]	; (8002374 <EXTI1_IRQHandler+0x74>)
 8002316:	6803      	ldr	r3, [r0, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim2);
 800231c:	f7fe fe12 	bl	8000f44 <HAL_TIM_Base_Start>
			//count=__HAL_TIM_GET_COUNTER(&htim3);
		}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==GPIO_PIN_RESET){
 8002320:	2102      	movs	r1, #2
 8002322:	4813      	ldr	r0, [pc, #76]	; (8002370 <EXTI1_IRQHandler+0x70>)
 8002324:	f7fe faa0 	bl	8000868 <HAL_GPIO_ReadPin>
 8002328:	4602      	mov	r2, r0
 800232a:	b9f8      	cbnz	r0, 800236c <EXTI1_IRQHandler+0x6c>
			counter=__HAL_TIM_GET_COUNTER(&htim2);
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <EXTI1_IRQHandler+0x74>)
			dist1= (float) counter/58;
 800232e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002378 <EXTI1_IRQHandler+0x78>
			counter=__HAL_TIM_GET_COUNTER(&htim2);
 8002332:	681b      	ldr	r3, [r3, #0]
			if(dist1<1.5){
				HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_SET);
			}
			else{
				HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
 8002334:	480e      	ldr	r0, [pc, #56]	; (8002370 <EXTI1_IRQHandler+0x70>)
			counter=__HAL_TIM_GET_COUNTER(&htim2);
 8002336:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
			dist1= (float) counter/58;
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <EXTI1_IRQHandler+0x7c>)
 800233c:	eef8 7a67 	vcvt.f32.u32	s15, s15
				HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
 8002340:	2120      	movs	r1, #32
			dist1= (float) counter/58;
 8002342:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			if(dist1<1.5){
 8002346:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
			dist1= (float) counter/58;
 800234a:	ed83 7a00 	vstr	s14, [r3]
			if(dist1<1.5){
 800234e:	ed93 7a00 	vldr	s14, [r3]
 8002352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_SET);
 800235a:	bf48      	it	mi
 800235c:	2201      	movmi	r2, #1
				HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
 800235e:	f7fe fa89 	bl	8000874 <HAL_GPIO_WritePin>
			}
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002362:	2007      	movs	r0, #7

		}


  /* USER CODE END EXTI1_IRQn 1 */
}
 8002364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002368:	f7fe b972 	b.w	8000650 <HAL_NVIC_DisableIRQ>
 800236c:	bd08      	pop	{r3, pc}
 800236e:	bf00      	nop
 8002370:	40020000 	.word	0x40020000
 8002374:	200001b4 	.word	0x200001b4
 8002378:	42680000 	.word	0x42680000
 800237c:	200001a0 	.word	0x200001a0

08002380 <EXTI2_IRQHandler>:

/**
* @brief This function handles EXTI line2 interrupt.
*/
void EXTI2_IRQHandler(void)
{
 8002380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002382:	2004      	movs	r0, #4
 8002384:	f7fe fa80 	bl	8000888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */



  HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
 8002388:	2120      	movs	r1, #32
 800238a:	4802      	ldr	r0, [pc, #8]	; (8002394 <EXTI2_IRQHandler+0x14>)


  /* USER CODE END EXTI2_IRQn 1 */
}
 800238c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
 8002390:	f7fe ba75 	b.w	800087e <HAL_GPIO_TogglePin>
 8002394:	40020000 	.word	0x40020000

08002398 <EXTI3_IRQHandler>:

/**
* @brief This function handles EXTI line3 interrupt.
*/
void EXTI3_IRQHandler(void)
{
 8002398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800239a:	2008      	movs	r0, #8
 800239c:	f7fe fa74 	bl	8000888 <HAL_GPIO_EXTI_IRQHandler>
//  else{
//	  //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
//  }
  //HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
  fire_var=1;
 80023a0:	4a06      	ldr	r2, [pc, #24]	; (80023bc <EXTI3_IRQHandler+0x24>)
 80023a2:	2301      	movs	r3, #1
 80023a4:	7013      	strb	r3, [r2, #0]
  turning=1;
 80023a6:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <EXTI3_IRQHandler+0x28>)
 80023a8:	7013      	strb	r3, [r2, #0]
  avoidance_on=0;
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <EXTI3_IRQHandler+0x2c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
  //turning=1;
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);//photodiode main
 80023b0:	2009      	movs	r0, #9
  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
  //HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);


  /* USER CODE END EXTI3_IRQn 1 */
}
 80023b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);//photodiode main
 80023b6:	f7fe b94b 	b.w	8000650 <HAL_NVIC_DisableIRQ>
 80023ba:	bf00      	nop
 80023bc:	20000034 	.word	0x20000034
 80023c0:	20000035 	.word	0x20000035
 80023c4:	20000009 	.word	0x20000009

080023c8 <EXTI4_IRQHandler>:

/**
* @brief This function handles EXTI line4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
 80023c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80023ca:	2010      	movs	r0, #16
 80023cc:	f7fe fa5c 	bl	8000888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  uint32_t counter;
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==GPIO_PIN_SET){
 80023d0:	2110      	movs	r1, #16
 80023d2:	4819      	ldr	r0, [pc, #100]	; (8002438 <EXTI4_IRQHandler+0x70>)
 80023d4:	f7fe fa48 	bl	8000868 <HAL_GPIO_ReadPin>
 80023d8:	2801      	cmp	r0, #1
 80023da:	d105      	bne.n	80023e8 <EXTI4_IRQHandler+0x20>
		__HAL_TIM_SET_COUNTER(&htim4,0);
 80023dc:	4817      	ldr	r0, [pc, #92]	; (800243c <EXTI4_IRQHandler+0x74>)
 80023de:	6803      	ldr	r3, [r0, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim4);
 80023e4:	f7fe fdae 	bl	8000f44 <HAL_TIM_Base_Start>
		//count=__HAL_TIM_GET_COUNTER(&htim3);
	}
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==GPIO_PIN_RESET){
 80023e8:	2110      	movs	r1, #16
 80023ea:	4813      	ldr	r0, [pc, #76]	; (8002438 <EXTI4_IRQHandler+0x70>)
 80023ec:	f7fe fa3c 	bl	8000868 <HAL_GPIO_ReadPin>
 80023f0:	4602      	mov	r2, r0
 80023f2:	b9f8      	cbnz	r0, 8002434 <EXTI4_IRQHandler+0x6c>
		counter=__HAL_TIM_GET_COUNTER(&htim4);
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <EXTI4_IRQHandler+0x74>)
		dist4= (float) counter/58;
 80023f6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002440 <EXTI4_IRQHandler+0x78>
		counter=__HAL_TIM_GET_COUNTER(&htim4);
 80023fa:	681b      	ldr	r3, [r3, #0]
		if(dist4<1.5){
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_SET);
		}
		else{
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
 80023fc:	4811      	ldr	r0, [pc, #68]	; (8002444 <EXTI4_IRQHandler+0x7c>)
		counter=__HAL_TIM_GET_COUNTER(&htim4);
 80023fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
		dist4= (float) counter/58;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <EXTI4_IRQHandler+0x80>)
 8002404:	eef8 7a67 	vcvt.f32.u32	s15, s15
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
 8002408:	2120      	movs	r1, #32
		dist4= (float) counter/58;
 800240a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		if(dist4<1.5){
 800240e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
		dist4= (float) counter/58;
 8002412:	ed83 7a00 	vstr	s14, [r3]
		if(dist4<1.5){
 8002416:	ed93 7a00 	vldr	s14, [r3]
 800241a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_SET);
 8002422:	bf48      	it	mi
 8002424:	2201      	movmi	r2, #1
			HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
 8002426:	f7fe fa25 	bl	8000874 <HAL_GPIO_WritePin>
		}
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800242a:	200a      	movs	r0, #10

	}


  /* USER CODE END EXTI4_IRQn 1 */
}
 800242c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8002430:	f7fe b90e 	b.w	8000650 <HAL_NVIC_DisableIRQ>
 8002434:	bd08      	pop	{r3, pc}
 8002436:	bf00      	nop
 8002438:	40020400 	.word	0x40020400
 800243c:	20000040 	.word	0x20000040
 8002440:	42680000 	.word	0x42680000
 8002444:	40020000 	.word	0x40020000
 8002448:	20000114 	.word	0x20000114

0800244c <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 800244c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800244e:	2020      	movs	r0, #32
 8002450:	f7fe fa1a 	bl	8000888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002454:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002458:	f7fe fa16 	bl	8000888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)==GPIO_PIN_SET ){
 800245c:	2120      	movs	r1, #32
 800245e:	480f      	ldr	r0, [pc, #60]	; (800249c <EXTI9_5_IRQHandler+0x50>)
 8002460:	4d0f      	ldr	r5, [pc, #60]	; (80024a0 <EXTI9_5_IRQHandler+0x54>)
 8002462:	4c10      	ldr	r4, [pc, #64]	; (80024a4 <EXTI9_5_IRQHandler+0x58>)
 8002464:	f7fe fa00 	bl	8000868 <HAL_GPIO_ReadPin>
 8002468:	2801      	cmp	r0, #1
 800246a:	4606      	mov	r6, r0
 800246c:	d110      	bne.n	8002490 <EXTI9_5_IRQHandler+0x44>
//
//	  HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_SET);
	  right();
 800246e:	f7ff fcff 	bl	8001e70 <right>
	  turning=1;
 8002472:	702e      	strb	r6, [r5, #0]
  }
  else{
//	  HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
	  left();
	  turning=1;
	  avoidance_on=0;
 8002474:	2300      	movs	r3, #0
  }
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002476:	2009      	movs	r0, #9
	  avoidance_on=0;
 8002478:	7023      	strb	r3, [r4, #0]
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800247a:	f7fe f8dd 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
 800247e:	2120      	movs	r1, #32
 8002480:	4809      	ldr	r0, [pc, #36]	; (80024a8 <EXTI9_5_IRQHandler+0x5c>)
 8002482:	f7fe f9fc 	bl	800087e <HAL_GPIO_TogglePin>
  turning=1;
 8002486:	2301      	movs	r3, #1
 8002488:	702b      	strb	r3, [r5, #0]
  avoidance_on=0;
 800248a:	2300      	movs	r3, #0
 800248c:	7023      	strb	r3, [r4, #0]
 800248e:	bd70      	pop	{r4, r5, r6, pc}
	  left();
 8002490:	f7ff fcd2 	bl	8001e38 <left>
	  turning=1;
 8002494:	2301      	movs	r3, #1
 8002496:	702b      	strb	r3, [r5, #0]
 8002498:	e7ec      	b.n	8002474 <EXTI9_5_IRQHandler+0x28>
 800249a:	bf00      	nop
 800249c:	40020800 	.word	0x40020800
 80024a0:	20000035 	.word	0x20000035
 80024a4:	20000009 	.word	0x20000009
 80024a8:	40020000 	.word	0x40020000

080024ac <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024ae:	4807      	ldr	r0, [pc, #28]	; (80024cc <TIM1_UP_TIM10_IRQHandler+0x20>)
 80024b0:	f7fe fe2b 	bl	800110a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//photodiode
 80024b4:	2028      	movs	r0, #40	; 0x28
 80024b6:	f7fe f8bf 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//photodiode
 80024ba:	2017      	movs	r0, #23
 80024bc:	f7fe f8bc 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);//photodiode main
 80024c0:	2008      	movs	r0, #8
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);//photodiode main
 80024c6:	f7fe b8b7 	b.w	8000638 <HAL_NVIC_EnableIRQ>
 80024ca:	bf00      	nop
 80024cc:	20000164 	.word	0x20000164

080024d0 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80024d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80024d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024d6:	f7fe f9d7 	bl	8000888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80024da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024de:	f7fe f9d3 	bl	8000888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024e2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024e6:	f7fe f9cf 	bl	8000888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)==GPIO_PIN_SET  || HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11)==GPIO_PIN_SET){
 80024ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ee:	480d      	ldr	r0, [pc, #52]	; (8002524 <EXTI15_10_IRQHandler+0x54>)
 80024f0:	f7fe f9ba 	bl	8000868 <HAL_GPIO_ReadPin>
 80024f4:	2801      	cmp	r0, #1
 80024f6:	d10c      	bne.n	8002512 <EXTI15_10_IRQHandler+0x42>
//	  start();
//	  right();
	  HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
 80024f8:	2120      	movs	r1, #32
 80024fa:	480a      	ldr	r0, [pc, #40]	; (8002524 <EXTI15_10_IRQHandler+0x54>)
 80024fc:	f7fe f9bf 	bl	800087e <HAL_GPIO_TogglePin>
//  }
//  else{
//	  //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(GPIOA,LD2_Pin,GPIO_PIN_RESET);
//  }
  turning=1;
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <EXTI15_10_IRQHandler+0x58>)
  HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
 8002502:	4808      	ldr	r0, [pc, #32]	; (8002524 <EXTI15_10_IRQHandler+0x54>)
  turning=1;
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
 8002508:	2120      	movs	r1, #32

  //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);//photodiode
//  turning=1;

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800250a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
 800250e:	f7fe b9b6 	b.w	800087e <HAL_GPIO_TogglePin>
  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)==GPIO_PIN_SET  || HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11)==GPIO_PIN_SET){
 8002512:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002516:	4803      	ldr	r0, [pc, #12]	; (8002524 <EXTI15_10_IRQHandler+0x54>)
 8002518:	f7fe f9a6 	bl	8000868 <HAL_GPIO_ReadPin>
 800251c:	2801      	cmp	r0, #1
 800251e:	d1ef      	bne.n	8002500 <EXTI15_10_IRQHandler+0x30>
 8002520:	e7ea      	b.n	80024f8 <EXTI15_10_IRQHandler+0x28>
 8002522:	bf00      	nop
 8002524:	40020000 	.word	0x40020000
 8002528:	20000035 	.word	0x20000035

0800252c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800252c:	490f      	ldr	r1, [pc, #60]	; (800256c <SystemInit+0x40>)
 800252e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002532:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <SystemInit+0x44>)
 800253c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800253e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002546:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800254e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002552:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002554:	4a07      	ldr	r2, [pc, #28]	; (8002574 <SystemInit+0x48>)
 8002556:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800255e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002560:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002562:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002566:	608b      	str	r3, [r1, #8]
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00
 8002570:	40023800 	.word	0x40023800
 8002574:	24003010 	.word	0x24003010

08002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800257c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800257e:	e003      	b.n	8002588 <LoopCopyDataInit>

08002580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002586:	3104      	adds	r1, #4

08002588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002588:	480b      	ldr	r0, [pc, #44]	; (80025b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800258c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800258e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002590:	d3f6      	bcc.n	8002580 <CopyDataInit>
  ldr  r2, =_sbss
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002594:	e002      	b.n	800259c <LoopFillZerobss>

08002596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002598:	f842 3b04 	str.w	r3, [r2], #4

0800259c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800259e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025a0:	d3f9      	bcc.n	8002596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025a2:	f7ff ffc3 	bl	800252c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a6:	f000 f811 	bl	80025cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025aa:	f7ff f9dd 	bl	8001968 <main>
  bx  lr    
 80025ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025b0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80025b4:	08002654 	.word	0x08002654
  ldr  r0, =_sdata
 80025b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025bc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80025c0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80025c4:	2000023c 	.word	0x2000023c

080025c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC_IRQHandler>
	...

080025cc <__libc_init_array>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	4e0d      	ldr	r6, [pc, #52]	; (8002604 <__libc_init_array+0x38>)
 80025d0:	4c0d      	ldr	r4, [pc, #52]	; (8002608 <__libc_init_array+0x3c>)
 80025d2:	1ba4      	subs	r4, r4, r6
 80025d4:	10a4      	asrs	r4, r4, #2
 80025d6:	2500      	movs	r5, #0
 80025d8:	42a5      	cmp	r5, r4
 80025da:	d109      	bne.n	80025f0 <__libc_init_array+0x24>
 80025dc:	4e0b      	ldr	r6, [pc, #44]	; (800260c <__libc_init_array+0x40>)
 80025de:	4c0c      	ldr	r4, [pc, #48]	; (8002610 <__libc_init_array+0x44>)
 80025e0:	f000 f818 	bl	8002614 <_init>
 80025e4:	1ba4      	subs	r4, r4, r6
 80025e6:	10a4      	asrs	r4, r4, #2
 80025e8:	2500      	movs	r5, #0
 80025ea:	42a5      	cmp	r5, r4
 80025ec:	d105      	bne.n	80025fa <__libc_init_array+0x2e>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025f4:	4798      	blx	r3
 80025f6:	3501      	adds	r5, #1
 80025f8:	e7ee      	b.n	80025d8 <__libc_init_array+0xc>
 80025fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025fe:	4798      	blx	r3
 8002600:	3501      	adds	r5, #1
 8002602:	e7f2      	b.n	80025ea <__libc_init_array+0x1e>
 8002604:	0800264c 	.word	0x0800264c
 8002608:	0800264c 	.word	0x0800264c
 800260c:	0800264c 	.word	0x0800264c
 8002610:	08002650 	.word	0x08002650

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr
